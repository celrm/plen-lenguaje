
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 23 16:28:48 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import alex.TV;
import ast.Op;
import ast.Dec;
import ast.ASExp;
import ast.ASIns;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 23 16:28:48 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\010\000\002\003\010\000\002\003\005" +
    "\000\002\004\002\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\005\010\000\002\005\007\000\002\007\010\000\002\006" +
    "\014\000\002\010\002\000\002\010\005\000\002\010\007" +
    "\000\002\011\002\000\002\011\004\000\002\015\007\000" +
    "\002\012\014\000\002\013\003\000\002\013\004\000\002" +
    "\013\006\000\002\013\003\000\002\014\002\000\002\014" +
    "\004\000\002\016\006\000\002\017\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\033\005\000" +
    "\002\033\003\000\002\032\005\000\002\032\003\000\002" +
    "\031\004\000\002\031\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\004\000\002\027\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\007\000\002\035\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\007\000\002\020\006\000\002\021\005" +
    "\000\002\022\002\000\002\022\003\000\002\022\005\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\006\000\002\037\005\000\002\037\007\000\002\037" +
    "\011\000\002\037\013\000\002\037\011\000\002\037\015" +
    "\000\002\037\004\000\002\037\004\000\002\023\002\000" +
    "\002\023\003\000\002\023\005\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\005\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\032\004\uffff\006\005\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\047\uffff\001\002\000\004\002\342\001\002\000\010\003" +
    "\327\004\326\047\330\001\002\000\030\004\015\010\012" +
    "\011\020\012\022\013\027\014\026\015\024\016\013\017" +
    "\010\021\ufffb\047\016\001\002\000\030\004\015\010\012" +
    "\011\020\012\022\013\027\014\026\015\024\016\013\017" +
    "\010\021\ufffb\047\016\001\002\000\004\004\321\001\002" +
    "\000\030\004\015\010\012\011\020\012\022\013\027\014" +
    "\026\015\024\016\013\017\010\021\ufffb\047\016\001\002" +
    "\000\016\004\015\011\020\012\022\013\027\014\026\047" +
    "\016\001\002\000\004\004\274\001\002\000\030\004\015" +
    "\010\012\011\020\012\022\013\027\014\026\015\024\016" +
    "\013\017\010\021\ufffb\047\016\001\002\000\010\004\uffa5" +
    "\026\uffa5\054\uffa5\001\002\000\016\004\015\011\020\012" +
    "\022\013\027\014\026\047\016\001\002\000\004\021\206" +
    "\001\002\000\004\064\203\001\002\000\030\004\015\010" +
    "\012\011\020\012\022\013\027\014\026\015\024\016\013" +
    "\017\010\021\ufffb\047\016\001\002\000\010\004\uffa8\026" +
    "\uffa8\054\uffa8\001\002\000\030\004\015\010\012\011\020" +
    "\012\022\013\027\014\026\015\024\016\013\017\010\021" +
    "\ufffb\047\016\001\002\000\004\004\157\001\002\000\004" +
    "\004\030\001\002\000\010\004\uffa6\026\uffa6\054\uffa6\001" +
    "\002\000\010\004\uffa7\026\uffa7\054\uffa7\001\002\000\006" +
    "\033\032\054\031\001\002\000\034\004\055\005\037\027" +
    "\034\030\036\032\061\037\040\044\054\046\056\047\035" +
    "\054\060\055\uffab\056\047\065\063\001\002\000\032\004" +
    "\055\005\037\027\034\030\036\032\061\037\040\044\054" +
    "\046\056\047\035\054\060\056\047\065\063\001\002\000" +
    "\052\026\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\057\uffbf" +
    "\062\uffbf\001\002\000\052\026\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\055\uffc5\057\uffc5\062\uffc5\001\002\000\026\004\055" +
    "\005\037\027\034\030\036\032\061\037\040\047\035\054" +
    "\060\056\047\065\063\001\002\000\052\026\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\055\uffc4\057\uffc4\062\uffc4\001\002\000" +
    "\052\026\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\057\uffc6" +
    "\062\uffc6\001\002\000\026\004\055\005\037\027\034\030" +
    "\036\032\061\037\040\047\035\054\060\056\047\065\063" +
    "\001\002\000\052\026\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055" +
    "\uffde\057\uffde\062\uffde\001\002\000\052\026\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\133\055\uffdc\057\uffdc\062\uffdc\001\002\000" +
    "\050\026\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\131\055\uffda\057\uffda\062\uffda" +
    "\001\002\000\046\026\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\055\uffd6\057\uffd6\062" +
    "\uffd6\001\002\000\046\026\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045" +
    "\uffd2\046\uffd2\047\112\050\113\051\111\055\uffd2\057\uffd2" +
    "\062\uffd2\001\002\000\040\026\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\045\106\046\107\055\uffcd\057\uffcd\062\uffcd\001\002\000" +
    "\034\004\055\005\037\027\034\030\036\032\061\037\040" +
    "\044\054\046\056\047\035\054\060\056\047\057\uffba\065" +
    "\063\001\002\000\034\026\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\102\041\101\042\103\043\104\055" +
    "\uffca\057\uffca\062\uffca\001\002\000\004\026\144\001\002" +
    "\000\024\026\uffc7\033\uffc7\034\076\035\077\036\uffc7\037" +
    "\uffc7\055\uffc7\057\uffc7\062\uffc7\001\002\000\020\026\uffe3" +
    "\033\uffe3\036\074\037\072\055\uffe3\057\uffe3\062\uffe3\001" +
    "\002\000\030\004\055\005\037\027\034\030\036\032\061" +
    "\037\040\046\056\047\035\054\060\056\047\065\063\001" +
    "\002\000\054\026\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\135" +
    "\055\uffc3\057\uffc3\062\uffc3\001\002\000\026\004\055\005" +
    "\037\027\034\030\036\032\061\037\040\047\035\054\060" +
    "\056\047\065\063\001\002\000\052\026\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\055\uffbe\057\uffbe\062\uffbe\001\002\000\032" +
    "\004\055\005\037\027\034\030\036\032\061\037\040\044" +
    "\054\046\056\047\035\054\060\056\047\065\063\001\002" +
    "\000\052\026\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\057" +
    "\uffc2\062\uffc2\001\002\000\052\026\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\055\uffe0\057\uffe0\062\uffe0\001\002\000\016\004" +
    "\015\011\020\012\022\013\027\014\026\047\016\001\002" +
    "\000\004\054\065\001\002\000\004\005\066\001\002\000" +
    "\004\055\067\001\002\000\052\026\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\057\uffc1\062\uffc1\001\002\000\004\062" +
    "\125\001\002\000\012\036\074\037\072\055\073\062\uffe3" +
    "\001\002\000\032\004\055\005\037\027\034\030\036\032" +
    "\061\037\040\044\054\046\056\047\035\054\060\056\047" +
    "\065\063\001\002\000\052\026\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\055\uffc0\057\uffc0\062\uffc0\001\002\000\032\004\055" +
    "\005\037\027\034\030\036\032\061\037\040\044\054\046" +
    "\056\047\035\054\060\056\047\065\063\001\002\000\024" +
    "\026\uffc9\033\uffc9\034\076\035\077\036\uffc9\037\uffc9\055" +
    "\uffc9\057\uffc9\062\uffc9\001\002\000\032\004\055\005\037" +
    "\027\034\030\036\032\061\037\040\044\054\046\056\047" +
    "\035\054\060\056\047\065\063\001\002\000\032\004\055" +
    "\005\037\027\034\030\036\032\061\037\040\044\054\046" +
    "\056\047\035\054\060\056\047\065\063\001\002\000\034" +
    "\026\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\102\041\101\042\103\043\104\055\uffcc\057\uffcc\062\uffcc" +
    "\001\002\000\032\004\055\005\037\027\034\030\036\032" +
    "\061\037\040\044\054\046\056\047\035\054\060\056\047" +
    "\065\063\001\002\000\032\004\055\005\037\027\034\030" +
    "\036\032\061\037\040\044\054\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\032\004\055\005\037\027" +
    "\034\030\036\032\061\037\040\044\054\046\056\047\035" +
    "\054\060\056\047\065\063\001\002\000\032\004\055\005" +
    "\037\027\034\030\036\032\061\037\040\044\054\046\056" +
    "\047\035\054\060\056\047\065\063\001\002\000\040\026" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\045\106\046\107\055\uffd0\057" +
    "\uffd0\062\uffd0\001\002\000\030\004\055\005\037\027\034" +
    "\030\036\032\061\037\040\046\056\047\035\054\060\056" +
    "\047\065\063\001\002\000\030\004\055\005\037\027\034" +
    "\030\036\032\061\037\040\046\056\047\035\054\060\056" +
    "\047\065\063\001\002\000\046\026\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\046\uffd4\047\112\050\113\051\111\055\uffd4" +
    "\057\uffd4\062\uffd4\001\002\000\030\004\055\005\037\027" +
    "\034\030\036\032\061\037\040\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\030\004\055\005\037\027" +
    "\034\030\036\032\061\037\040\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\030\004\055\005\037\027" +
    "\034\030\036\032\061\037\040\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\046\026\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\055" +
    "\uffd8\057\uffd8\062\uffd8\001\002\000\046\026\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\055\uffd7\057\uffd7\062\uffd7\001\002\000\046\026\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\055\uffd9\057\uffd9\062\uffd9\001\002\000\046\026\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\112\050\113" +
    "\051\111\055\uffd5\057\uffd5\062\uffd5\001\002\000\040\026" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\045\106\046\107\055\uffce\057" +
    "\uffce\062\uffce\001\002\000\040\026\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\045\106\046\107\055\uffcf\057\uffcf\062\uffcf\001\002" +
    "\000\040\026\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\106\046\107" +
    "\055\uffd1\057\uffd1\062\uffd1\001\002\000\034\026\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\102\041\101" +
    "\042\103\043\104\055\uffcb\057\uffcb\062\uffcb\001\002\000" +
    "\024\026\uffc8\033\uffc8\034\076\035\077\036\uffc8\037\uffc8" +
    "\055\uffc8\057\uffc8\062\uffc8\001\002\000\032\004\055\005" +
    "\037\027\034\030\036\032\061\037\040\044\054\046\056" +
    "\047\035\054\060\056\047\065\063\001\002\000\004\055" +
    "\127\001\002\000\052\026\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\055\uffbd\057\uffbd\062\uffbd\001\002\000\050\026\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\131\055\uffdb\057\uffdb\062\uffdb\001\002\000\026" +
    "\004\055\005\037\027\034\030\036\032\061\037\040\047" +
    "\035\054\060\056\047\065\063\001\002\000\052\026\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\133\055\uffdd\057\uffdd\062\uffdd\001" +
    "\002\000\026\004\055\005\037\027\034\030\036\032\061" +
    "\037\040\047\035\054\060\056\047\065\063\001\002\000" +
    "\052\026\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\057\uffdf" +
    "\062\uffdf\001\002\000\034\004\055\005\037\027\034\030" +
    "\036\032\061\037\040\044\054\046\056\047\035\054\060" +
    "\055\uffab\056\047\065\063\001\002\000\006\055\uffaa\062" +
    "\141\001\002\000\004\055\140\001\002\000\052\026\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\055\uffbc\057\uffbc\062\uffbc\001" +
    "\002\000\034\004\055\005\037\027\034\030\036\032\061" +
    "\037\040\044\054\046\056\047\035\054\060\055\uffab\056" +
    "\047\065\063\001\002\000\004\055\uffa9\001\002\000\046" +
    "\026\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047\112" +
    "\050\113\051\111\055\uffd3\057\uffd3\062\uffd3\001\002\000" +
    "\072\003\ufff4\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\024\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\037\ufff4\044\ufff4\046\ufff4\047\ufff4\054\ufff4\056" +
    "\ufff4\061\ufff4\065\ufff4\001\002\000\006\057\uffb9\062\150" +
    "\001\002\000\004\057\147\001\002\000\052\026\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\055\uffbb\057\uffbb\062\uffbb\001\002" +
    "\000\034\004\055\005\037\027\034\030\036\032\061\037" +
    "\040\044\054\046\056\047\035\054\060\056\047\057\uffba" +
    "\065\063\001\002\000\004\057\uffb8\001\002\000\052\026" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\057\uffe1\062\uffe1" +
    "\001\002\000\052\026\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055" +
    "\uffe2\057\uffe2\062\uffe2\001\002\000\004\055\155\001\002" +
    "\000\004\026\156\001\002\000\072\003\ufff3\004\ufff3\005" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\037\ufff3\044\ufff3" +
    "\046\ufff3\047\ufff3\054\ufff3\056\ufff3\061\ufff3\065\ufff3\001" +
    "\002\000\004\054\160\001\002\000\006\010\161\055\ufff1" +
    "\001\002\000\016\004\015\011\020\012\022\013\027\014" +
    "\026\047\016\001\002\000\004\055\163\001\002\000\004" +
    "\033\164\001\002\000\004\060\165\001\002\000\022\004" +
    "\015\010\012\011\020\012\022\013\027\014\026\047\016" +
    "\061\uffee\001\002\000\062\003\uffb7\004\uffb7\005\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\020\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\037" +
    "\uffb7\044\uffb7\046\uffb7\047\uffb7\054\uffb7\056\uffb7\061\uffb7" +
    "\065\uffb7\001\002\000\022\004\015\010\012\011\020\012" +
    "\022\013\027\014\026\047\016\061\uffee\001\002\000\062" +
    "\003\uffb6\004\uffb6\005\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\020\uffb6\022\uffb6\024\uffb6\025\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\037\uffb6\044\uffb6\046\uffb6\047" +
    "\uffb6\054\uffb6\056\uffb6\061\uffb6\065\uffb6\001\002\000\004" +
    "\061\172\001\002\000\004\026\173\001\002\000\030\004" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\021\ufff2\047\ufff2\001\002\000\004\061" +
    "\uffed\001\002\000\004\004\176\001\002\000\006\055\ufff0" +
    "\062\177\001\002\000\006\010\161\055\ufff1\001\002\000" +
    "\004\055\uffef\001\002\000\004\021\ufff7\001\002\000\004" +
    "\021\ufff8\001\002\000\016\004\015\011\020\012\022\013" +
    "\027\014\026\047\016\001\002\000\010\004\uffa4\026\uffa4" +
    "\054\uffa4\001\002\000\004\002\001\001\002\000\004\060" +
    "\207\001\002\000\062\003\217\004\211\005\037\010\012" +
    "\011\020\012\022\013\027\014\026\020\214\022\210\024" +
    "\215\025\216\027\034\030\036\031\224\032\061\037\040" +
    "\044\054\046\056\047\222\054\060\056\047\061\uffe6\065" +
    "\063\001\002\000\004\054\261\001\002\000\046\004\uffa5" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\135\001\002\000\062\003" +
    "\217\004\211\005\037\010\012\011\020\012\022\013\027" +
    "\014\026\020\214\022\210\024\215\025\216\027\034\030" +
    "\036\031\224\032\061\037\040\044\054\046\056\047\222" +
    "\054\060\056\047\061\uffe6\065\063\001\002\000\004\033" +
    "\255\001\002\000\032\004\055\005\037\027\034\030\036" +
    "\032\061\037\040\044\054\046\056\047\035\054\060\056" +
    "\047\065\063\001\002\000\004\054\245\001\002\000\004" +
    "\054\235\001\002\000\004\026\234\001\002\000\062\003" +
    "\uffb5\004\uffb5\005\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\020\uffb5\022\uffb5\024\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\037\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\054\uffb5\056\uffb5\061\uffb5\065\uffb5\001\002\000\044\026" +
    "\233\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\036\004\211" +
    "\005\037\011\020\012\022\013\027\014\026\027\034\030" +
    "\036\032\061\037\040\047\222\054\060\056\047\065\063" +
    "\001\002\000\004\061\231\001\002\000\004\054\225\001" +
    "\002\000\032\004\055\005\037\027\034\030\036\032\061" +
    "\037\040\044\054\046\056\047\035\054\060\056\047\065" +
    "\063\001\002\000\004\055\227\001\002\000\004\026\230" +
    "\001\002\000\062\003\uffb2\004\uffb2\005\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\020\uffb2\022\uffb2\024\uffb2" +
    "\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\037\uffb2\044" +
    "\uffb2\046\uffb2\047\uffb2\054\uffb2\056\uffb2\061\uffb2\065\uffb2" +
    "\001\002\000\004\002\uffe4\001\002\000\010\004\uffa3\026" +
    "\uffa3\054\uffa3\001\002\000\062\003\uffad\004\uffad\005\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\020\uffad\022" +
    "\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\037\uffad\044\uffad\046\uffad\047\uffad\054\uffad\056\uffad\061" +
    "\uffad\065\uffad\001\002\000\062\003\uffac\004\uffac\005\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\020\uffac\022" +
    "\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\037\uffac\044\uffac\046\uffac\047\uffac\054\uffac\056\uffac\061" +
    "\uffac\065\uffac\001\002\000\004\004\236\001\002\000\004" +
    "\063\237\001\002\000\032\004\055\005\037\027\034\030" +
    "\036\032\061\037\040\044\054\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\004\055\241\001\002\000" +
    "\004\060\242\001\002\000\062\003\217\004\211\005\037" +
    "\010\012\011\020\012\022\013\027\014\026\020\214\022" +
    "\210\024\215\025\216\027\034\030\036\031\224\032\061" +
    "\037\040\044\054\046\056\047\222\054\060\056\047\061" +
    "\uffe6\065\063\001\002\000\004\061\244\001\002\000\062" +
    "\003\uffb0\004\uffb0\005\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\037\uffb0\044\uffb0\046\uffb0\047" +
    "\uffb0\054\uffb0\056\uffb0\061\uffb0\065\uffb0\001\002\000\032" +
    "\004\055\005\037\027\034\030\036\032\061\037\040\044" +
    "\054\046\056\047\035\054\060\056\047\065\063\001\002" +
    "\000\004\055\247\001\002\000\004\060\250\001\002\000" +
    "\062\003\217\004\211\005\037\010\012\011\020\012\022" +
    "\013\027\014\026\020\214\022\210\024\215\025\216\027" +
    "\034\030\036\031\224\032\061\037\040\044\054\046\056" +
    "\047\222\054\060\056\047\061\uffe6\065\063\001\002\000" +
    "\004\061\252\001\002\000\062\003\uffb1\004\uffb1\005\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\020\uffb1\022" +
    "\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\037\uffb1\044\uffb1\046\uffb1\047\uffb1\054\uffb1\056\uffb1\061" +
    "\uffb1\065\uffb1\001\002\000\004\026\254\001\002\000\062" +
    "\003\uffb3\004\uffb3\005\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\020\uffb3\022\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\037\uffb3\044\uffb3\046\uffb3\047" +
    "\uffb3\054\uffb3\056\uffb3\061\uffb3\065\uffb3\001\002\000\032" +
    "\004\055\005\037\027\034\030\036\032\061\037\040\044" +
    "\054\046\056\047\035\054\060\056\047\065\063\001\002" +
    "\000\004\026\257\001\002\000\062\003\uffb4\004\uffb4\005" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\020\uffb4" +
    "\022\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\037\uffb4\044\uffb4\046\uffb4\047\uffb4\054\uffb4\056\uffb4" +
    "\061\uffb4\065\uffb4\001\002\000\004\061\uffe5\001\002\000" +
    "\032\004\055\005\037\027\034\030\036\032\061\037\040" +
    "\044\054\046\056\047\035\054\060\056\047\065\063\001" +
    "\002\000\004\055\263\001\002\000\004\060\264\001\002" +
    "\000\062\003\217\004\211\005\037\010\012\011\020\012" +
    "\022\013\027\014\026\020\214\022\210\024\215\025\216" +
    "\027\034\030\036\031\224\032\061\037\040\044\054\046" +
    "\056\047\222\054\060\056\047\061\uffe6\065\063\001\002" +
    "\000\004\061\266\001\002\000\064\003\uffaf\004\uffaf\005" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\020\uffaf" +
    "\022\uffaf\023\267\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\037\uffaf\044\uffaf\046\uffaf\047\uffaf\054\uffaf" +
    "\056\uffaf\061\uffaf\065\uffaf\001\002\000\004\060\270\001" +
    "\002\000\062\003\217\004\211\005\037\010\012\011\020" +
    "\012\022\013\027\014\026\020\214\022\210\024\215\025" +
    "\216\027\034\030\036\031\224\032\061\037\040\044\054" +
    "\046\056\047\222\054\060\056\047\061\uffe6\065\063\001" +
    "\002\000\004\061\272\001\002\000\062\003\uffae\004\uffae" +
    "\005\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\020" +
    "\uffae\022\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\037\uffae\044\uffae\046\uffae\047\uffae\054\uffae\056" +
    "\uffae\061\uffae\065\uffae\001\002\000\004\021\ufff9\001\002" +
    "\000\004\020\275\001\002\000\016\004\015\011\020\012" +
    "\022\013\027\014\026\047\016\001\002\000\004\054\277" +
    "\001\002\000\024\003\302\004\015\010\161\011\020\012" +
    "\022\013\027\014\026\047\016\055\ufff1\001\002\000\004" +
    "\055\307\001\002\000\004\055\uffea\001\002\000\004\055" +
    "\uffe7\001\002\000\004\004\304\001\002\000\006\055\uffe9" +
    "\062\305\001\002\000\024\003\302\004\015\010\161\011" +
    "\020\012\022\013\027\014\026\047\016\055\ufff1\001\002" +
    "\000\004\055\uffe8\001\002\000\004\060\310\001\002\000" +
    "\062\003\217\004\211\005\037\010\012\011\020\012\022" +
    "\013\027\014\026\020\214\022\210\024\215\025\216\027" +
    "\034\030\036\031\224\032\061\037\040\044\054\046\056" +
    "\047\222\054\060\056\047\061\uffe6\065\063\001\002\000" +
    "\004\061\312\001\002\000\030\004\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\047\uffeb\001\002\000\004\004\314\001\002\000\004" +
    "\033\315\001\002\000\032\004\055\005\037\027\034\030" +
    "\036\032\061\037\040\044\054\046\056\047\035\054\060" +
    "\056\047\065\063\001\002\000\004\026\317\001\002\000" +
    "\072\003\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\024\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\037\ufff5\044\ufff5\046\ufff5\047\ufff5\054\ufff5\056" +
    "\ufff5\061\ufff5\065\ufff5\001\002\000\004\021\ufff6\001\002" +
    "\000\004\033\322\001\002\000\016\004\015\011\020\012" +
    "\022\013\027\014\026\047\016\001\002\000\004\026\324" +
    "\001\002\000\030\004\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\047\uffec" +
    "\001\002\000\004\021\ufffa\001\002\000\004\007\336\001" +
    "\002\000\004\026\335\001\002\000\004\007\331\001\002" +
    "\000\004\004\332\001\002\000\004\026\333\001\002\000" +
    "\032\004\uffff\006\005\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\047\uffff\001" +
    "\002\000\030\004\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\047\ufffd\001" +
    "\002\000\030\004\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\047\ufffc\001" +
    "\002\000\004\004\337\001\002\000\004\026\340\001\002" +
    "\000\032\004\uffff\006\005\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\047\uffff" +
    "\001\002\000\030\004\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\047\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\016\005\006\006\020" +
    "\007\013\012\022\015\010\040\024\001\001\000\020\004" +
    "\324\005\006\006\020\007\013\012\022\015\010\040\024" +
    "\001\001\000\002\001\001\000\020\004\317\005\006\006" +
    "\020\007\013\012\022\015\010\040\024\001\001\000\004" +
    "\040\312\001\001\000\002\001\001\000\020\004\272\005" +
    "\006\006\020\007\013\012\022\015\010\040\024\001\001" +
    "\000\002\001\001\000\004\040\231\001\001\000\004\016" +
    "\204\001\001\000\002\001\001\000\020\004\201\005\006" +
    "\006\020\007\013\012\022\015\010\040\024\001\001\000" +
    "\002\001\001\000\020\004\200\005\006\006\020\007\013" +
    "\012\022\015\010\040\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\017\135\020\032\021\056\023\153\024" +
    "\052\025\051\026\047\027\045\030\044\031\043\032\042" +
    "\033\041\034\040\035\061\001\001\000\034\017\050\020" +
    "\032\021\056\024\052\025\051\026\047\027\045\030\044" +
    "\031\043\032\042\033\041\034\040\035\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\032\021\056" +
    "\034\152\035\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\032\021\056\034\151\035\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\144\020\032\021\056\022\145\024\052\025\051\026" +
    "\047\027\045\030\044\031\043\032\042\033\041\034\040" +
    "\035\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\032\021\056" +
    "\030\142\031\043\032\042\033\041\034\040\035\061\001" +
    "\001\000\002\001\001\000\016\020\032\021\056\032\127" +
    "\033\041\034\040\035\061\001\001\000\002\001\001\000" +
    "\034\017\067\020\032\021\056\024\070\025\051\026\047" +
    "\027\045\030\044\031\043\032\042\033\041\034\040\035" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\020\032\021\056\025\123\026\047\027" +
    "\045\030\044\031\043\032\042\033\041\034\040\035\061" +
    "\001\001\000\002\001\001\000\030\020\032\021\056\025" +
    "\074\026\047\027\045\030\044\031\043\032\042\033\041" +
    "\034\040\035\061\001\001\000\002\001\001\000\026\020" +
    "\032\021\056\026\122\027\045\030\044\031\043\032\042" +
    "\033\041\034\040\035\061\001\001\000\026\020\032\021" +
    "\056\026\077\027\045\030\044\031\043\032\042\033\041" +
    "\034\040\035\061\001\001\000\002\001\001\000\024\020" +
    "\032\021\056\027\121\030\044\031\043\032\042\033\041" +
    "\034\040\035\061\001\001\000\024\020\032\021\056\027" +
    "\120\030\044\031\043\032\042\033\041\034\040\035\061" +
    "\001\001\000\024\020\032\021\056\027\117\030\044\031" +
    "\043\032\042\033\041\034\040\035\061\001\001\000\024" +
    "\020\032\021\056\027\104\030\044\031\043\032\042\033" +
    "\041\034\040\035\061\001\001\000\002\001\001\000\022" +
    "\020\032\021\056\030\116\031\043\032\042\033\041\034" +
    "\040\035\061\001\001\000\022\020\032\021\056\030\107" +
    "\031\043\032\042\033\041\034\040\035\061\001\001\000" +
    "\002\001\001\000\020\020\032\021\056\031\115\032\042" +
    "\033\041\034\040\035\061\001\001\000\020\020\032\021" +
    "\056\031\114\032\042\033\041\034\040\035\061\001\001" +
    "\000\020\020\032\021\056\031\113\032\042\033\041\034" +
    "\040\035\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\125\020\032\021\056\024\052\025" +
    "\051\026\047\027\045\030\044\031\043\032\042\033\041" +
    "\034\040\035\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\032\021\056\033\131" +
    "\034\040\035\061\001\001\000\002\001\001\000\012\020" +
    "\032\021\056\034\133\035\061\001\001\000\002\001\001" +
    "\000\036\017\135\020\032\021\056\023\136\024\052\025" +
    "\051\026\047\027\045\030\044\031\043\032\042\033\041" +
    "\034\040\035\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\017\135\020\032\021\056" +
    "\023\141\024\052\025\051\026\047\027\045\030\044\031" +
    "\043\032\042\033\041\034\040\035\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\017\144" +
    "\020\032\021\056\022\150\024\052\025\051\026\047\027" +
    "\045\030\044\031\043\032\042\033\041\034\040\035\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\161\001\001\000\004\040" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\165\007\167\011\170\036\166\040" +
    "\024\001\001\000\002\001\001\000\014\005\165\007\167" +
    "\011\173\036\166\040\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\005\165\007\167" +
    "\014\222\017\212\020\220\021\056\024\052\025\051\026" +
    "\047\027\045\030\044\031\043\032\042\033\041\034\040" +
    "\035\061\036\217\037\211\040\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\165\007\167\014\257" +
    "\017\212\020\220\021\056\024\052\025\051\026\047\027" +
    "\045\030\044\031\043\032\042\033\041\034\040\035\061" +
    "\036\217\037\211\040\024\001\001\000\002\001\001\000" +
    "\034\017\252\020\032\021\056\024\052\025\051\026\047" +
    "\027\045\030\044\031\043\032\042\033\041\034\040\035" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\032\021\056\034\152\035\061\040\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\225\020\032\021" +
    "\056\024\052\025\051\026\047\027\045\030\044\031\043" +
    "\032\042\033\041\034\040\035\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\237\020\032" +
    "\021\056\024\052\025\051\026\047\027\045\030\044\031" +
    "\043\032\042\033\041\034\040\035\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\165\007\167\014" +
    "\242\017\212\020\220\021\056\024\052\025\051\026\047" +
    "\027\045\030\044\031\043\032\042\033\041\034\040\035" +
    "\061\036\217\037\211\040\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\245\020\032\021\056\024" +
    "\052\025\051\026\047\027\045\030\044\031\043\032\042" +
    "\033\041\034\040\035\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\005\165\007\167\014\250\017\212" +
    "\020\220\021\056\024\052\025\051\026\047\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\061\036\217" +
    "\037\211\040\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\255" +
    "\020\032\021\056\024\052\025\051\026\047\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\017\261\020\032\021\056\024\052\025\051\026\047" +
    "\027\045\030\044\031\043\032\042\033\041\034\040\035" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\005\165\007\167\014\264\017\212\020\220\021\056\024" +
    "\052\025\051\026\047\027\045\030\044\031\043\032\042" +
    "\033\041\034\040\035\061\036\217\037\211\040\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\005\165\007\167\014\270\017\212\020\220\021" +
    "\056\024\052\025\051\026\047\027\045\030\044\031\043" +
    "\032\042\033\041\034\040\035\061\036\217\037\211\040" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\275\001\001\000" +
    "\002\001\001\000\010\010\300\013\277\040\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\300\013\305" +
    "\040\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\005\165\007\167\014\310\017\212\020\220\021\056" +
    "\024\052\025\051\026\047\027\045\030\044\031\043\032" +
    "\042\033\041\034\040\035\061\036\217\037\211\040\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\315\020\032\021\056" +
    "\024\052\025\051\026\047\027\045\030\044\031\043\032" +
    "\042\033\041\034\040\035\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\340\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private ASExp as = new ASExp();
   private ASIns is = new ASIns();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= IMPORTBL DECBL MAINBL 
            {
              Object RESULT =null;
		Object imps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object exe = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.program(imps,decs,exe); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTBL ::= Import Id From Id Punto IMPORTBL 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV s = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.imports(i,s,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTBL ::= Import Mul From Id Punto IMPORTBL 
            {
              Object RESULT =null;
		TV s = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.imports(null,s,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTBL ::= Import error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECBL ::= DEC_VAR DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.VAR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECBL ::= DEC_REG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.REGISTER); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECBL ::= DEC_DEFREG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.DEFREG); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECBL ::= DEC_FUN DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.FUNCTION); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECBL ::= DEC_TYPE DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.TYPE); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_VAR ::= Const TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_var(t,i,e,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_VAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEC_VAR ::= TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_var(t,i,e,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_VAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEC_REG ::= TYPENAME Id PA VALUES PC Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.dec_reg(t,i,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_REG",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEC_DEFREG ::= Data Id PA CPARAMS PC Asign LA DENTRO_REG LC Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.dec_defreg(i,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_DEFREG",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CPARAMS ::= Const TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,null,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CPARAMS ::= Const TYPENAME Id Coma CPARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,r,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DENTRO_REG ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_REG",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DENTRO_REG ::= INSTR_REG DENTRO_REG 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.instructions(d,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_REG",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEC_TYPE ::= Type Id Asign TYPENAME Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_type(i,t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_TYPE",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEC_FUN ::= Function Id Return TYPENAME PA PARAMS PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_fun(i,t,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= CPARAMS 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,null,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,r,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DENTRO ::= INSTR DENTRO 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.instructions(i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAINBL ::= Main LA DENTRO LC 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAINBL",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPR ::= E0 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E8 ::= Mul E8 
            {
              Object RESULT =null;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_punt(o,Op.PUNTERO,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E8",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E8 ::= And E8 
            {
              Object RESULT =null;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_puntinv(o,Op.PUNTEROINV,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E8",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E8 ::= ETOP 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E8",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E7 ::= E7 Acceso E8 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_acceso(o1,o2,Op.ACCESO,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E7 ::= E8 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E6 ::= E6 Indice E7 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_indice(o1,o2,Op.INDICE,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E6 ::= E7 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E5 ::= Guion E6 
            {
              Object RESULT =null;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.SIGNO,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E5 ::= E6 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E4 ::= E4 Mod E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MOD,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E4 ::= E4 Div E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DIV,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E4 ::= E4 Mul E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MUL,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E4 ::= E5 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E3 ::= E3 Suma E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.SUMA,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E3 ::= E3 Guion E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.RESTA,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E3 ::= Not E4 
            {
              Object RESULT =null;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.NOT,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E3 ::= E4 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E2 ::= E2 Meq E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MEQ,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E2 ::= E2 Maq E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAQ,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E2 ::= E2 Menor E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MENOR,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 Mayor E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAYOR,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= E1 Igual E2 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.IGUAL,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E1 ::= E1 Distinto E2 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DISTINTO,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E2 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E0 ::= E0 Or E1 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.OR,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E0 ::= E0 And E1 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.AND,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E0 ::= E1 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETOP ::= Entero 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico_ent(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETOP ::= Si 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico_bul(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETOP ::= No 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico_bul(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETOP ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico_id(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETOP ::= Caracter 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico_car(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETOP ::= New TYPENAME PA Entero PC 
            {
              Object RESULT =null;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_new(t,e,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETOP ::= PA E0 PC 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETOP ::= EXPFUN 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETOP ::= EXPLISTA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETOP ::= PA EXPR Coma EXPR PC 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_bin(e1,e2,Op.ARRAYINIT,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPFUN ::= Id PA VALUES PC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_call(i,v,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPFUN",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPLISTA ::= CA LISTADENTRO CC 
            {
              Object RESULT =null;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV f = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_listinit(l,f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPLISTA",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTADENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTADENTRO ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTADENTRO ::= EXPR Coma LISTADENTRO 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTR_REG ::= DEC_VAR 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR_REG",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTR_REG ::= DEC_REG 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR_REG",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTR ::= INSTR_REG 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTR ::= EXPR Asign EXPR Punto 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_asign(e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTR ::= Return EXPR Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_return(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTR ::= Kut PA EXPR PC Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.ins_kut(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTR ::= While PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_while(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTR ::= For PA Id DosPts EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV el = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_for(el,ar,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTR ::= If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_if(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTR ::= If PA EXPR PC LA DENTRO LC Else LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_ifelse(b,d1,d2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTR ::= EXPFUN Punto 
            {
              Object RESULT =null;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_fun(f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTR ::= error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALUES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALUES ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALUES ::= EXPR Coma VALUES 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPENAME ::= Ent 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPENAME ::= Bul 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPENAME ::= Car 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPENAME ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPENAME ::= Arr Backslash TYPENAME 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename_arr(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPENAME ::= Mul TYPENAME 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename_punt(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

