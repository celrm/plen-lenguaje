
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 28 13:24:08 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import alex.TV;
import ast.Op;
import ast.Dec;
import ast.ASExp;
import ast.ASIns;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 28 13:24:08 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\010\000\002\003\005\000\002\004\002" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\005\010\000\002" +
    "\005\007\000\002\007\010\000\002\006\014\000\002\010" +
    "\002\000\002\010\005\000\002\010\007\000\002\011\002" +
    "\000\002\011\004\000\002\015\007\000\002\012\014\000" +
    "\002\013\003\000\002\013\004\000\002\013\006\000\002" +
    "\014\002\000\002\014\004\000\002\016\006\000\002\017" +
    "\003\000\002\033\005\000\002\033\003\000\002\032\005" +
    "\000\002\032\003\000\002\031\004\000\002\031\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\004\000\002\027\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\025\005\000\002\025\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\007\000\002\020\006\000\002" +
    "\021\005\000\002\022\002\000\002\022\003\000\002\022" +
    "\005\000\002\035\003\000\002\035\003\000\002\036\003" +
    "\000\002\036\006\000\002\036\005\000\002\036\007\000" +
    "\002\036\011\000\002\036\013\000\002\036\011\000\002" +
    "\036\012\000\002\036\006\000\002\036\004\000\002\036" +
    "\004\000\002\023\002\000\002\023\003\000\002\023\005" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\030\004\uffff\006\005\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\001\002\000\004\002\326\001\002\000\006\003\320\004" +
    "\317\001\002\000\026\004\015\010\012\011\017\012\021" +
    "\013\026\014\025\015\022\016\013\017\007\021\ufffc\001" +
    "\002\000\004\004\313\001\002\000\026\004\015\010\012" +
    "\011\017\012\021\013\026\014\025\015\022\016\013\017" +
    "\007\021\ufffc\001\002\000\026\004\015\010\012\011\017" +
    "\012\021\013\026\014\025\015\022\016\013\017\007\021" +
    "\ufffc\001\002\000\014\004\015\011\017\012\021\013\026" +
    "\014\025\001\002\000\004\004\266\001\002\000\026\004" +
    "\015\010\012\011\017\012\021\013\026\014\025\015\022" +
    "\016\013\017\007\021\ufffc\001\002\000\010\004\uffaa\026" +
    "\uffaa\054\uffaa\001\002\000\004\021\173\001\002\000\004" +
    "\064\170\001\002\000\026\004\015\010\012\011\017\012" +
    "\021\013\026\014\025\015\022\016\013\017\007\021\ufffc" +
    "\001\002\000\010\004\uffad\026\uffad\054\uffad\001\002\000" +
    "\004\004\145\001\002\000\026\004\015\010\012\011\017" +
    "\012\021\013\026\014\025\015\022\016\013\017\007\021" +
    "\ufffc\001\002\000\004\004\027\001\002\000\010\004\uffab" +
    "\026\uffab\054\uffab\001\002\000\010\004\uffac\026\uffac\054" +
    "\uffac\001\002\000\006\033\030\054\031\001\002\000\024" +
    "\004\052\005\035\027\033\030\034\032\056\044\050\046" +
    "\053\054\054\056\043\001\002\000\026\004\052\005\035" +
    "\027\033\030\034\032\056\044\050\046\053\054\054\055" +
    "\uffb0\056\043\001\002\000\052\026\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\055\uffc5\057\uffc5\062\uffc5\001\002\000\052\026" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\055\uffca\057\uffca\062\uffca" +
    "\001\002\000\052\026\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055" +
    "\uffc9\057\uffc9\062\uffc9\001\002\000\052\026\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\055\uffcb\057\uffcb\062\uffcb\001\002\000" +
    "\052\026\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\123\055\uffe1\057\uffe1" +
    "\062\uffe1\001\002\000\050\026\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\121\055" +
    "\uffdf\057\uffdf\062\uffdf\001\002\000\046\026\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\055\uffdb\057\uffdb\062\uffdb\001\002\000\046\026\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\045\uffd7\046\uffd7\047\102\050\103\051" +
    "\101\055\uffd7\057\uffd7\062\uffd7\001\002\000\040\026\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\045\076\046\077\055\uffd1\057\uffd1" +
    "\062\uffd1\001\002\000\026\004\052\005\035\027\033\030" +
    "\034\032\056\044\050\046\053\054\054\056\043\057\uffc0" +
    "\001\002\000\034\026\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\071\040\072\041\070\042\074\043\073\055\uffcf" +
    "\057\uffcf\062\uffcf\001\002\000\022\026\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\066\055\uffcc\057\uffcc\062\uffcc\001\002" +
    "\000\006\055\uffaf\062\133\001\002\000\020\026\uffe5\033" +
    "\uffe5\034\062\035\064\055\uffe5\057\uffe5\062\uffe5\001\002" +
    "\000\022\004\052\005\035\027\033\030\034\032\056\046" +
    "\053\054\054\056\043\001\002\000\004\055\130\001\002" +
    "\000\054\026\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\125\055" +
    "\uffc8\057\uffc8\062\uffc8\001\002\000\020\004\052\005\035" +
    "\027\033\030\034\032\056\054\054\056\043\001\002\000" +
    "\024\004\052\005\035\027\033\030\034\032\056\044\050" +
    "\046\053\054\054\056\043\001\002\000\052\026\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\055\uffc4\057\uffc4\062\uffc4\001\002" +
    "\000\052\026\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\057" +
    "\uffc7\062\uffc7\001\002\000\052\026\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\055\uffe3\057\uffe3\062\uffe3\001\002\000\004\062" +
    "\115\001\002\000\012\034\062\035\064\055\063\062\uffe5" +
    "\001\002\000\024\004\052\005\035\027\033\030\034\032" +
    "\056\044\050\046\053\054\054\056\043\001\002\000\052" +
    "\026\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\057\uffc6\062" +
    "\uffc6\001\002\000\024\004\052\005\035\027\033\030\034" +
    "\032\056\044\050\046\053\054\054\056\043\001\002\000" +
    "\022\026\uffce\033\uffce\034\uffce\035\uffce\036\066\055\uffce" +
    "\057\uffce\062\uffce\001\002\000\024\004\052\005\035\027" +
    "\033\030\034\032\056\044\050\046\053\054\054\056\043" +
    "\001\002\000\034\026\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\071\040\072\041\070\042\074\043\073\055\uffd0" +
    "\057\uffd0\062\uffd0\001\002\000\024\004\052\005\035\027" +
    "\033\030\034\032\056\044\050\046\053\054\054\056\043" +
    "\001\002\000\024\004\052\005\035\027\033\030\034\032" +
    "\056\044\050\046\053\054\054\056\043\001\002\000\024" +
    "\004\052\005\035\027\033\030\034\032\056\044\050\046" +
    "\053\054\054\056\043\001\002\000\024\004\052\005\035" +
    "\027\033\030\034\032\056\044\050\046\053\054\054\056" +
    "\043\001\002\000\024\004\052\005\035\027\033\030\034" +
    "\032\056\044\050\046\053\054\054\056\043\001\002\000" +
    "\040\026\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\045\076\046\077\055" +
    "\uffd3\057\uffd3\062\uffd3\001\002\000\022\004\052\005\035" +
    "\027\033\030\034\032\056\046\053\054\054\056\043\001" +
    "\002\000\022\004\052\005\035\027\033\030\034\032\056" +
    "\046\053\054\054\056\043\001\002\000\046\026\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\102\050\103\051" +
    "\101\055\uffd9\057\uffd9\062\uffd9\001\002\000\022\004\052" +
    "\005\035\027\033\030\034\032\056\046\053\054\054\056" +
    "\043\001\002\000\022\004\052\005\035\027\033\030\034" +
    "\032\056\046\053\054\054\056\043\001\002\000\022\004" +
    "\052\005\035\027\033\030\034\032\056\046\053\054\054" +
    "\056\043\001\002\000\046\026\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\055\uffdd\057" +
    "\uffdd\062\uffdd\001\002\000\046\026\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\055\uffdc" +
    "\057\uffdc\062\uffdc\001\002\000\046\026\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\055" +
    "\uffde\057\uffde\062\uffde\001\002\000\046\026\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\045\uffda\046\uffda\047\102\050\103\051\101" +
    "\055\uffda\057\uffda\062\uffda\001\002\000\040\026\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\045\076\046\077\055\uffd5\057\uffd5\062" +
    "\uffd5\001\002\000\040\026\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\045" +
    "\076\046\077\055\uffd4\057\uffd4\062\uffd4\001\002\000\040" +
    "\026\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\045\076\046\077\055\uffd2" +
    "\057\uffd2\062\uffd2\001\002\000\040\026\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\045\076\046\077\055\uffd6\057\uffd6\062\uffd6\001" +
    "\002\000\022\026\uffcd\033\uffcd\034\uffcd\035\uffcd\036\066" +
    "\055\uffcd\057\uffcd\062\uffcd\001\002\000\024\004\052\005" +
    "\035\027\033\030\034\032\056\044\050\046\053\054\054" +
    "\056\043\001\002\000\004\055\117\001\002\000\052\026" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\057\uffc3\062\uffc3" +
    "\001\002\000\050\026\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\121\055\uffe0\057" +
    "\uffe0\062\uffe0\001\002\000\020\004\052\005\035\027\033" +
    "\030\034\032\056\054\054\056\043\001\002\000\052\026" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\123\055\uffe2\057\uffe2\062\uffe2" +
    "\001\002\000\020\004\052\005\035\027\033\030\034\032" +
    "\056\054\054\056\043\001\002\000\052\026\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\057\uffe4\062\uffe4\001\002\000" +
    "\026\004\052\005\035\027\033\030\034\032\056\044\050" +
    "\046\053\054\054\055\uffb0\056\043\001\002\000\004\055" +
    "\127\001\002\000\052\026\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\055\uffc2\057\uffc2\062\uffc2\001\002\000\004\026\131\001" +
    "\002\000\066\003\ufff4\004\ufff4\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\044\ufff4\046\ufff4\054\ufff4\056" +
    "\ufff4\061\ufff4\001\002\000\046\026\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\045\uffd8\046\uffd8\047\102\050\103\051\101\055\uffd8" +
    "\057\uffd8\062\uffd8\001\002\000\026\004\052\005\035\027" +
    "\033\030\034\032\056\044\050\046\053\054\054\055\uffb0" +
    "\056\043\001\002\000\004\055\uffae\001\002\000\006\057" +
    "\uffbf\062\140\001\002\000\004\057\137\001\002\000\052" +
    "\026\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\057\uffc1\062" +
    "\uffc1\001\002\000\026\004\052\005\035\027\033\030\034" +
    "\032\056\044\050\046\053\054\054\056\043\057\uffc0\001" +
    "\002\000\004\057\uffbe\001\002\000\004\026\143\001\002" +
    "\000\066\003\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\044\ufff5\046\ufff5\054\ufff5\056\ufff5" +
    "\061\ufff5\001\002\000\004\021\ufff8\001\002\000\004\054" +
    "\146\001\002\000\006\010\147\055\ufff2\001\002\000\014" +
    "\004\015\011\017\012\021\013\026\014\025\001\002\000" +
    "\004\055\151\001\002\000\004\033\152\001\002\000\004" +
    "\060\153\001\002\000\020\004\015\010\012\011\017\012" +
    "\021\013\026\014\025\061\uffef\001\002\000\056\003\uffbd" +
    "\004\uffbd\005\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\044\uffbd\046\uffbd\054\uffbd\056" +
    "\uffbd\061\uffbd\001\002\000\020\004\015\010\012\011\017" +
    "\012\021\013\026\014\025\061\uffef\001\002\000\056\003" +
    "\uffbc\004\uffbc\005\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\044\uffbc\046\uffbc\054\uffbc" +
    "\056\uffbc\061\uffbc\001\002\000\004\061\160\001\002\000" +
    "\004\026\161\001\002\000\026\004\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\001\002\000\004\061\uffee\001\002\000\004\004\164" +
    "\001\002\000\006\055\ufff1\062\165\001\002\000\006\010" +
    "\147\055\ufff2\001\002\000\004\055\ufff0\001\002\000\004" +
    "\021\ufff9\001\002\000\014\004\015\011\017\012\021\013" +
    "\026\014\025\001\002\000\010\004\uffa9\026\uffa9\054\uffa9" +
    "\001\002\000\004\002\001\001\002\000\004\060\174\001" +
    "\002\000\056\003\205\004\176\005\035\010\012\011\017" +
    "\012\021\013\026\014\025\020\202\022\175\023\201\024" +
    "\203\025\204\027\033\030\034\031\211\032\056\044\050" +
    "\046\053\054\054\056\043\061\uffe8\001\002\000\004\054" +
    "\257\001\002\000\046\004\uffaa\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\125\001\002\000\056\003\205\004\176\005\035\010" +
    "\012\011\017\012\021\013\026\014\025\020\202\022\175" +
    "\023\201\024\203\025\204\027\033\030\034\031\211\032" +
    "\056\044\050\046\053\054\054\056\043\061\uffe8\001\002" +
    "\000\004\033\253\001\002\000\006\022\242\060\241\001" +
    "\002\000\024\004\052\005\035\027\033\030\034\032\056" +
    "\044\050\046\053\054\054\056\043\001\002\000\004\054" +
    "\231\001\002\000\004\054\221\001\002\000\004\026\220" +
    "\001\002\000\056\003\uffbb\004\uffbb\005\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\044" +
    "\uffbb\046\uffbb\054\uffbb\056\uffbb\061\uffbb\001\002\000\044" +
    "\026\217\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000\004\061" +
    "\216\001\002\000\004\054\212\001\002\000\024\004\052" +
    "\005\035\027\033\030\034\032\056\044\050\046\053\054" +
    "\054\056\043\001\002\000\004\055\214\001\002\000\004" +
    "\026\215\001\002\000\056\003\uffb8\004\uffb8\005\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\020\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\044\uffb8\046\uffb8\054\uffb8\056\uffb8\061\uffb8\001\002" +
    "\000\004\002\uffe6\001\002\000\056\003\uffb2\004\uffb2\005" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\020\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\044\uffb2\046\uffb2\054\uffb2\056\uffb2\061\uffb2" +
    "\001\002\000\056\003\uffb1\004\uffb1\005\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\020\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\044" +
    "\uffb1\046\uffb1\054\uffb1\056\uffb1\061\uffb1\001\002\000\004" +
    "\004\222\001\002\000\004\063\223\001\002\000\024\004" +
    "\052\005\035\027\033\030\034\032\056\044\050\046\053" +
    "\054\054\056\043\001\002\000\004\055\225\001\002\000" +
    "\004\060\226\001\002\000\056\003\205\004\176\005\035" +
    "\010\012\011\017\012\021\013\026\014\025\020\202\022" +
    "\175\023\201\024\203\025\204\027\033\030\034\031\211" +
    "\032\056\044\050\046\053\054\054\056\043\061\uffe8\001" +
    "\002\000\004\061\230\001\002\000\056\003\uffb6\004\uffb6" +
    "\005\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\020" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\044\uffb6\046\uffb6\054\uffb6\056\uffb6\061" +
    "\uffb6\001\002\000\024\004\052\005\035\027\033\030\034" +
    "\032\056\044\050\046\053\054\054\056\043\001\002\000" +
    "\004\055\233\001\002\000\004\060\234\001\002\000\056" +
    "\003\205\004\176\005\035\010\012\011\017\012\021\013" +
    "\026\014\025\020\202\022\175\023\201\024\203\025\204" +
    "\027\033\030\034\031\211\032\056\044\050\046\053\054" +
    "\054\056\043\061\uffe8\001\002\000\004\061\236\001\002" +
    "\000\056\003\uffb7\004\uffb7\005\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\044\uffb7\046" +
    "\uffb7\054\uffb7\056\uffb7\061\uffb7\001\002\000\004\026\240" +
    "\001\002\000\056\003\uffb9\004\uffb9\005\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\020\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\044" +
    "\uffb9\046\uffb9\054\uffb9\056\uffb9\061\uffb9\001\002\000\056" +
    "\003\205\004\176\005\035\010\012\011\017\012\021\013" +
    "\026\014\025\020\202\022\175\023\201\024\203\025\204" +
    "\027\033\030\034\031\211\032\056\044\050\046\053\054" +
    "\054\056\043\061\uffe8\001\002\000\004\054\243\001\002" +
    "\000\024\004\052\005\035\027\033\030\034\032\056\044" +
    "\050\046\053\054\054\056\043\001\002\000\004\055\245" +
    "\001\002\000\004\060\246\001\002\000\056\003\205\004" +
    "\176\005\035\010\012\011\017\012\021\013\026\014\025" +
    "\020\202\022\175\023\201\024\203\025\204\027\033\030" +
    "\034\031\211\032\056\044\050\046\053\054\054\056\043" +
    "\061\uffe8\001\002\000\004\061\250\001\002\000\056\003" +
    "\uffb4\004\uffb4\005\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\044\uffb4\046\uffb4\054\uffb4" +
    "\056\uffb4\061\uffb4\001\002\000\004\061\252\001\002\000" +
    "\056\003\uffb3\004\uffb3\005\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\044\uffb3\046\uffb3" +
    "\054\uffb3\056\uffb3\061\uffb3\001\002\000\024\004\052\005" +
    "\035\027\033\030\034\032\056\044\050\046\053\054\054" +
    "\056\043\001\002\000\004\026\255\001\002\000\056\003" +
    "\uffba\004\uffba\005\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\044\uffba\046\uffba\054\uffba" +
    "\056\uffba\061\uffba\001\002\000\004\061\uffe7\001\002\000" +
    "\024\004\052\005\035\027\033\030\034\032\056\044\050" +
    "\046\053\054\054\056\043\001\002\000\004\055\261\001" +
    "\002\000\004\060\262\001\002\000\056\003\205\004\176" +
    "\005\035\010\012\011\017\012\021\013\026\014\025\020" +
    "\202\022\175\023\201\024\203\025\204\027\033\030\034" +
    "\031\211\032\056\044\050\046\053\054\054\056\043\061" +
    "\uffe8\001\002\000\004\061\264\001\002\000\056\003\uffb5" +
    "\004\uffb5\005\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\044\uffb5\046\uffb5\054\uffb5\056" +
    "\uffb5\061\uffb5\001\002\000\004\021\ufffa\001\002\000\004" +
    "\020\267\001\002\000\014\004\015\011\017\012\021\013" +
    "\026\014\025\001\002\000\004\054\271\001\002\000\020" +
    "\004\015\010\147\011\017\012\021\013\026\014\025\055" +
    "\ufff2\001\002\000\004\055\300\001\002\000\004\055\uffeb" +
    "\001\002\000\004\004\275\001\002\000\006\055\uffea\062" +
    "\276\001\002\000\020\004\015\010\147\011\017\012\021" +
    "\013\026\014\025\055\ufff2\001\002\000\004\055\uffe9\001" +
    "\002\000\004\060\301\001\002\000\056\003\205\004\176" +
    "\005\035\010\012\011\017\012\021\013\026\014\025\020" +
    "\202\022\175\023\201\024\203\025\204\027\033\030\034" +
    "\031\211\032\056\044\050\046\053\054\054\056\043\061" +
    "\uffe8\001\002\000\004\061\303\001\002\000\026\004\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\021\uffec\001\002\000\004\004\305\001\002" +
    "\000\004\033\306\001\002\000\024\004\052\005\035\027" +
    "\033\030\034\032\056\044\050\046\053\054\054\056\043" +
    "\001\002\000\004\026\310\001\002\000\066\003\ufff6\004" +
    "\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\044\ufff6\046\ufff6\054\ufff6\056\ufff6\061\ufff6\001\002\000" +
    "\004\021\ufffb\001\002\000\004\021\ufff7\001\002\000\004" +
    "\033\314\001\002\000\014\004\015\011\017\012\021\013" +
    "\026\014\025\001\002\000\004\026\316\001\002\000\026" +
    "\004\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\uffed\001\002\000\004\007\322" +
    "\001\002\000\004\026\321\001\002\000\026\004\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\021\ufffd\001\002\000\004\004\323\001\002\000" +
    "\004\026\324\001\002\000\030\004\uffff\006\005\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\021\uffff\001\002\000\026\004\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\021" +
    "\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\015\005\010\006\017" +
    "\007\013\012\022\015\007\037\023\001\001\000\002\001" +
    "\001\000\020\004\311\005\010\006\017\007\013\012\022" +
    "\015\007\037\023\001\001\000\020\004\310\005\010\006" +
    "\017\007\013\012\022\015\007\037\023\001\001\000\004" +
    "\037\303\001\001\000\002\001\001\000\020\004\264\005" +
    "\010\006\017\007\013\012\022\015\007\037\023\001\001" +
    "\000\002\001\001\000\004\016\171\001\001\000\002\001" +
    "\001\000\020\004\166\005\010\006\017\007\013\012\022" +
    "\015\007\037\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\143\005\010\006\017\007\013\012\022" +
    "\015\007\037\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\017\141" +
    "\020\031\021\054\024\046\025\044\026\043\027\041\030" +
    "\040\031\037\032\036\033\035\034\056\001\001\000\034" +
    "\017\045\020\031\021\054\023\050\024\046\025\044\026" +
    "\043\027\041\030\040\031\037\032\036\033\035\034\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\017\134\020\031\021\054\022\135\024\046\025\044" +
    "\026\043\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\031\021\054\030" +
    "\131\031\037\032\036\033\035\034\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\031\021\054\032" +
    "\117\033\035\034\056\001\001\000\032\017\057\020\031" +
    "\021\054\024\060\025\044\026\043\027\041\030\040\031" +
    "\037\032\036\033\035\034\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\031\021\054\025\113\026\043" +
    "\027\041\030\040\031\037\032\036\033\035\034\056\001" +
    "\001\000\002\001\001\000\026\020\031\021\054\025\064" +
    "\026\043\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\001\001\000\002\001\001\000\024\020\031\021\054" +
    "\026\066\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\001\001\000\002\001\001\000\022\020\031\021\054" +
    "\027\112\030\040\031\037\032\036\033\035\034\056\001" +
    "\001\000\022\020\031\021\054\027\111\030\040\031\037" +
    "\032\036\033\035\034\056\001\001\000\022\020\031\021" +
    "\054\027\110\030\040\031\037\032\036\033\035\034\056" +
    "\001\001\000\022\020\031\021\054\027\107\030\040\031" +
    "\037\032\036\033\035\034\056\001\001\000\022\020\031" +
    "\021\054\027\074\030\040\031\037\032\036\033\035\034" +
    "\056\001\001\000\002\001\001\000\020\020\031\021\054" +
    "\030\106\031\037\032\036\033\035\034\056\001\001\000" +
    "\020\020\031\021\054\030\077\031\037\032\036\033\035" +
    "\034\056\001\001\000\002\001\001\000\016\020\031\021" +
    "\054\031\105\032\036\033\035\034\056\001\001\000\016" +
    "\020\031\021\054\031\104\032\036\033\035\034\056\001" +
    "\001\000\016\020\031\021\054\031\103\032\036\033\035" +
    "\034\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\017\115\020\031\021\054\024\046\025\044" +
    "\026\043\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\031\021\054\033\121\034\056\001" +
    "\001\000\002\001\001\000\010\020\031\021\054\034\123" +
    "\001\001\000\002\001\001\000\034\017\045\020\031\021" +
    "\054\023\125\024\046\025\044\026\043\027\041\030\040" +
    "\031\037\032\036\033\035\034\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\045\020\031\021\054\023" +
    "\133\024\046\025\044\026\043\027\041\030\040\031\037" +
    "\032\036\033\035\034\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\134\020\031\021\054\022\140\024\046\025\044\026" +
    "\043\027\041\030\040\031\037\032\036\033\035\034\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\147" +
    "\001\001\000\004\037\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\153\007\155" +
    "\011\156\035\154\037\023\001\001\000\002\001\001\000" +
    "\014\005\153\007\155\011\161\035\154\037\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\005\153\007" +
    "\155\014\207\017\177\020\206\021\054\024\046\025\044" +
    "\026\043\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\035\205\036\176\037\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\153\007\155\014\255\017" +
    "\177\020\206\021\054\024\046\025\044\026\043\027\041" +
    "\030\040\031\037\032\036\033\035\034\056\035\205\036" +
    "\176\037\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\017\236\020\031\021\054\024\046\025\044\026" +
    "\043\027\041\030\040\031\037\032\036\033\035\034\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\017\212\020\031\021\054\024" +
    "\046\025\044\026\043\027\041\030\040\031\037\032\036" +
    "\033\035\034\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\223\020\031\021\054\024\046\025\044\026\043" +
    "\027\041\030\040\031\037\032\036\033\035\034\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\005\153" +
    "\007\155\014\226\017\177\020\206\021\054\024\046\025" +
    "\044\026\043\027\041\030\040\031\037\032\036\033\035" +
    "\034\056\035\205\036\176\037\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\017\231\020\031\021\054" +
    "\024\046\025\044\026\043\027\041\030\040\031\037\032" +
    "\036\033\035\034\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\005\153\007\155\014\234\017\177\020" +
    "\206\021\054\024\046\025\044\026\043\027\041\030\040" +
    "\031\037\032\036\033\035\034\056\035\205\036\176\037" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\005\153\007\155\014" +
    "\250\017\177\020\206\021\054\024\046\025\044\026\043" +
    "\027\041\030\040\031\037\032\036\033\035\034\056\035" +
    "\205\036\176\037\023\001\001\000\002\001\001\000\032" +
    "\017\243\020\031\021\054\024\046\025\044\026\043\027" +
    "\041\030\040\031\037\032\036\033\035\034\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\005\153\007" +
    "\155\014\246\017\177\020\206\021\054\024\046\025\044" +
    "\026\043\027\041\030\040\031\037\032\036\033\035\034" +
    "\056\035\205\036\176\037\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\253\020\031\021\054\024\046\025\044\026\043" +
    "\027\041\030\040\031\037\032\036\033\035\034\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\017\257\020\031\021\054\024\046\025\044\026" +
    "\043\027\041\030\040\031\037\032\036\033\035\034\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\153\007\155\014\262\017\177\020\206\021\054\024\046" +
    "\025\044\026\043\027\041\030\040\031\037\032\036\033" +
    "\035\034\056\035\205\036\176\037\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\267\001\001\000\002\001\001\000\010" +
    "\010\272\013\271\037\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\272\013\276\037\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\005\153\007\155\014\301\017\177" +
    "\020\206\021\054\024\046\025\044\026\043\027\041\030" +
    "\040\031\037\032\036\033\035\034\056\035\205\036\176" +
    "\037\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\017\306\020\031" +
    "\021\054\024\046\025\044\026\043\027\041\030\040\031" +
    "\037\032\036\033\035\034\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\324\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private ASExp as = new ASExp();
   private ASIns is = new ASIns();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= IMPORTBL DECBL MAINBL 
            {
              Object RESULT =null;
		Object imps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object exe = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.program(imps,decs,exe); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTBL ::= Import Id From Id Punto IMPORTBL 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV s = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.imports(i,s,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTBL ::= Import error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECBL ::= DEC_VAR DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.VAR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECBL ::= DEC_REG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.REGISTER); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECBL ::= DEC_DEFREG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.DEFREG); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECBL ::= DEC_FUN DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.FUNCTION); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECBL ::= DEC_TYPE DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.declares(v,r,Dec.TYPE); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_VAR ::= Const TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_var(t,i,e,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_VAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_VAR ::= TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_var(t,i,e,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_VAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEC_REG ::= TYPENAME Id PA VALUES PC Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.dec_reg(t,i,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_REG",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEC_DEFREG ::= Data Id PA CPARAMS PC Asign LA DENTRO_REG LC Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.dec_defreg(i,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_DEFREG",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CPARAMS ::= Const TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,null,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CPARAMS ::= Const TYPENAME Id Coma CPARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,r,true); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DENTRO_REG ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_REG",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DENTRO_REG ::= INSTR_REG DENTRO_REG 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.instructions(d,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_REG",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEC_TYPE ::= Type Id Asign TYPENAME Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_type(i,t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_TYPE",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEC_FUN ::= Function Id Return TYPENAME PA PARAMS PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.dec_fun(i,t,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= CPARAMS 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,null,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,r,false); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DENTRO ::= INSTR DENTRO 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.instructions(i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAINBL ::= Main LA DENTRO LC 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAINBL",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPR ::= E0 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E7 ::= E7 Acceso ETOP 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.ACCESO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E7 ::= ETOP 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E6 ::= E6 Indice E7 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.INDICE); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E6 ::= E7 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E5 ::= Guion E6 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.SIGNO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E5 ::= E6 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E4 ::= E4 Mod E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MOD); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E4 ::= E4 Div E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DIV); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E4 ::= E4 Mul E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MUL); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E4 ::= E5 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E3 ::= E3 Suma E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.SUMA); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E3 ::= E3 Guion E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.RESTA); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E3 ::= Not E4 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.NOT); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E3 ::= E4 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E2 ::= E2 Meq E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MEQ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E2 ::= E2 Maq E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAQ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E2 ::= E2 Menor E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MENOR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E2 ::= E2 Mayor E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAYOR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E2 ::= E2 And E3 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.AND); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E2 ::= E3 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 Or E2 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.OR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E0 ::= E0 Igual E1 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.IGUAL); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E0 Distinto E1 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DISTINTO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ETOP ::= Entero 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETOP ::= Si 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETOP ::= No 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETOP ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETOP ::= Caracter 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETOP ::= PA E0 PC 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETOP ::= EXPFUN 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETOP ::= EXPLISTA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETOP ::= PA EXPR Coma EXPR PC 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_bin(e1,e2,Op.ARRAYINIT); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPFUN ::= Id PA VALUES PC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_call(i,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPFUN",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPLISTA ::= CA LISTADENTRO CC 
            {
              Object RESULT =null;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_listinit(l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPLISTA",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTADENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTADENTRO ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTADENTRO ::= EXPR Coma LISTADENTRO 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTR_REG ::= DEC_VAR 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR_REG",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTR_REG ::= DEC_REG 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR_REG",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTR ::= INSTR_REG 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTR ::= EXPR Asign EXPR Punto 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_asign(e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTR ::= Return EXPR Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_return(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTR ::= Kut PA EXPR PC Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.ins_kut(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTR ::= While PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_while(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTR ::= For PA Id DosPts EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV el = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_for(el,ar,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTR ::= If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_if(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTR ::= Else If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_elseif(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTR ::= Else LA DENTRO LC 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_else(d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTR ::= EXPFUN Punto 
            {
              Object RESULT =null;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_fun(f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTR ::= error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALUES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALUES ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUES ::= EXPR Coma VALUES 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TYPENAME ::= Ent 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPENAME ::= Bul 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPENAME ::= Car 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPENAME ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPENAME ::= Arr Backslash TYPENAME 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.typename_arr(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

