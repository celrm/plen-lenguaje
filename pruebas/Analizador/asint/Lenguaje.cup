package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.E;
import ast.ASExp;

scan with {: return getScanner().next_token(); :};
action code {:
   private ASExp as = new ASExp();
:};
parser code {: 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal Id, Entero, Import, From, Const, Arr, Ent, 
		Bul, Car, Data, Function, Return, Main, If, 
		Else, While, Punto, Length, Si, No, Caracter, 
		Asign, Distinto, Igual, Or, And, Menor, Meq, 
		Mayor, Maq, Not, Suma, Guion, Mul, Div, Mod,
		Indice, Acceso, PA, PC, CA, CC, LA, LC, Coma, DosPts
		;


terminal  MAS, POR, PAP, PCIERRE;
terminal String NUM;

non terminal  E Exp, Term, Fact;

Exp ::= Exp: aDeexp1 MAS Term: aDeterm 
   {: RESULT=as.suma(aDeexp1,aDeterm); :};
Exp ::= Term: aDeterm
   {: RESULT=aDeterm; :};
Term ::= Term: aDeterm1 POR Fact: aDefact 
   {: RESULT=as.mul(aDeterm1,aDefact); :};
Term ::= Fact: aDefact
   {: RESULT=aDefact; :};   
Fact ::= NUM: lexDeNum           
   {: RESULT = as.num(lexDeNum); :};
Fact ::= PAP Exp: aDeexp PCIERRE
   {: RESULT = aDeexp; :};

