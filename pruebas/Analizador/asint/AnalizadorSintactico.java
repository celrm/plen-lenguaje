
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 27 17:11:16 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import alex.TV;
import ast.E;
import ast.Op;
import ast.Typename;
import ast.ASExp;
import ast.ASIns;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 27 17:11:16 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\010\000\002\003\005\000\002\004\002" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\007\000\002\007\010\000\002\010" +
    "\014\000\002\011\002\000\002\011\005\000\002\011\007" +
    "\000\002\012\002\000\002\012\004\000\002\012\004\000" +
    "\002\016\007\000\002\013\014\000\002\014\002\000\002" +
    "\014\005\000\002\014\004\000\002\014\007\000\002\014" +
    "\006\000\002\015\002\000\002\015\004\000\002\017\006" +
    "\000\002\020\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\027\004\000\002" +
    "\027\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\004\000\002\031\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\003\000\002\033\005\000\002\033" +
    "\003\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\005\000\002" +
    "\035\003\000\002\035\003\000\002\035\007\000\002\021" +
    "\006\000\002\022\005\000\002\023\002\000\002\023\003" +
    "\000\002\023\005\000\002\036\003\000\002\036\003\000" +
    "\002\036\005\000\002\036\007\000\002\036\011\000\002" +
    "\036\013\000\002\036\011\000\002\036\012\000\002\036" +
    "\006\000\002\036\004\000\002\036\004\000\002\024\002" +
    "\000\002\024\003\000\002\024\005\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\030\004\uffff\006\005\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\001\002\000\004\002\326\001\002\000\006\003\320\004" +
    "\317\001\002\000\026\004\012\010\010\011\017\012\020" +
    "\013\026\014\024\015\022\016\011\017\007\021\ufffc\001" +
    "\002\000\004\004\313\001\002\000\014\004\012\011\017" +
    "\012\020\013\026\014\024\001\002\000\004\004\266\001" +
    "\002\000\010\004\uffa8\026\uffa8\054\uffa8\001\002\000\046" +
    "\003\ufff5\004\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\031\ufff5\061\ufff5\001\002\000" +
    "\004\021\177\001\002\000\026\004\012\010\010\011\017" +
    "\012\020\013\026\014\024\015\022\016\011\017\007\021" +
    "\ufffc\001\002\000\026\004\012\010\010\011\017\012\020" +
    "\013\026\014\024\015\022\016\011\017\007\021\ufffc\001" +
    "\002\000\004\064\172\001\002\000\010\004\uffab\026\uffab" +
    "\054\uffab\001\002\000\026\004\012\010\010\011\017\012" +
    "\020\013\026\014\024\015\022\016\011\017\007\021\ufffc" +
    "\001\002\000\004\004\147\001\002\000\004\004\032\001" +
    "\002\000\010\004\uffa9\026\uffa9\054\uffa9\001\002\000\026" +
    "\004\012\010\010\011\017\012\020\013\026\014\024\015" +
    "\022\016\011\017\007\021\ufffc\001\002\000\010\004\uffaa" +
    "\026\uffaa\054\uffaa\001\002\000\026\004\012\010\010\011" +
    "\017\012\020\013\026\014\024\015\022\016\011\017\007" +
    "\021\ufffc\001\002\000\004\021\ufff9\001\002\000\004\021" +
    "\ufff7\001\002\000\006\033\034\054\033\001\002\000\026" +
    "\004\054\005\040\027\036\030\037\032\060\044\052\046" +
    "\055\054\056\055\uffae\056\047\001\002\000\024\004\054" +
    "\005\040\027\036\030\037\032\060\044\052\046\055\054" +
    "\056\056\047\001\002\000\050\026\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\055\uffc1\057\uffc1\062\uffc1\001\002\000\050\026\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\055\uffc6\057\uffc6\062\uffc6\001\002\000\050" +
    "\026\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\055\uffc5\057\uffc5\062\uffc5\001" +
    "\002\000\050\026\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\057\uffc7" +
    "\062\uffc7\001\002\000\050\026\uffcb\034\114\035\115\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\057\uffcb\062\uffcb\001\002\000\044\026\uffcd\036\112" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\057\uffcd\062\uffcd\001\002\000\042\026\uffd3\037\105\040" +
    "\106\041\104\042\107\043\110\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\057\uffd3\062" +
    "\uffd3\001\002\000\030\026\uffd7\045\102\046\101\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7\062" +
    "\uffd7\001\002\000\024\026\uffdb\047\076\050\077\051\075" +
    "\052\uffdb\053\uffdb\055\uffdb\057\uffdb\062\uffdb\001\002\000" +
    "\016\026\uffdd\052\uffdd\053\uffdd\055\uffdd\057\uffdd\062\uffdd" +
    "\001\002\000\026\004\054\005\040\027\036\030\037\032" +
    "\060\044\052\046\055\054\056\056\047\057\uffbc\001\002" +
    "\000\004\026\136\001\002\000\016\026\uffdf\052\067\053" +
    "\uffdf\055\uffdf\057\uffdf\062\uffdf\001\002\000\020\004\054" +
    "\005\040\027\036\030\037\032\060\054\056\056\047\001" +
    "\002\000\014\026\uffe1\053\064\055\uffe1\057\uffe1\062\uffe1" +
    "\001\002\000\052\026\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\127\055" +
    "\uffc4\057\uffc4\062\uffc4\001\002\000\022\004\054\005\040" +
    "\027\036\030\037\032\060\044\052\054\056\056\047\001" +
    "\002\000\024\004\054\005\040\027\036\030\037\032\060" +
    "\044\052\046\055\054\056\056\047\001\002\000\050\026" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\057\uffc0\062\uffc0\001\002" +
    "\000\050\026\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\057\uffc3\062" +
    "\uffc3\001\002\000\050\026\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\057\uffc8\062\uffc8\001\002\000\004\062\071\001\002\000" +
    "\010\053\064\055\065\062\uffe1\001\002\000\024\004\054" +
    "\005\040\027\036\030\037\032\060\044\052\046\055\054" +
    "\056\056\047\001\002\000\050\026\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\055\uffc2\057\uffc2\062\uffc2\001\002\000\016\026\uffe0\052" +
    "\067\053\uffe0\055\uffe0\057\uffe0\062\uffe0\001\002\000\024" +
    "\004\054\005\040\027\036\030\037\032\060\044\052\046" +
    "\055\054\056\056\047\001\002\000\016\026\uffde\052\uffde" +
    "\053\uffde\055\uffde\057\uffde\062\uffde\001\002\000\024\004" +
    "\054\005\040\027\036\030\037\032\060\044\052\046\055" +
    "\054\056\056\047\001\002\000\004\055\073\001\002\000" +
    "\050\026\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\057\uffbf\062\uffbf" +
    "\001\002\000\024\026\uffdc\047\076\050\077\051\075\052" +
    "\uffdc\053\uffdc\055\uffdc\057\uffdc\062\uffdc\001\002\000\022" +
    "\004\054\005\040\027\036\030\037\032\060\044\052\054" +
    "\056\056\047\001\002\000\022\004\054\005\040\027\036" +
    "\030\037\032\060\044\052\054\056\056\047\001\002\000" +
    "\022\004\054\005\040\027\036\030\037\032\060\044\052" +
    "\054\056\056\047\001\002\000\030\026\uffd9\045\102\046" +
    "\101\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9" +
    "\057\uffd9\062\uffd9\001\002\000\020\004\054\005\040\027" +
    "\036\030\037\032\060\054\056\056\047\001\002\000\020" +
    "\004\054\005\040\027\036\030\037\032\060\054\056\056" +
    "\047\001\002\000\042\026\uffd6\037\105\040\106\041\104" +
    "\042\107\043\110\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\055\uffd6\057\uffd6\062\uffd6\001\002" +
    "\000\020\004\054\005\040\027\036\030\037\032\060\054" +
    "\056\056\047\001\002\000\020\004\054\005\040\027\036" +
    "\030\037\032\060\054\056\056\047\001\002\000\020\004" +
    "\054\005\040\027\036\030\037\032\060\054\056\056\047" +
    "\001\002\000\020\004\054\005\040\027\036\030\037\032" +
    "\060\054\056\056\047\001\002\000\020\004\054\005\040" +
    "\027\036\030\037\032\060\054\056\056\047\001\002\000" +
    "\044\026\uffd1\036\112\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\057\uffd1\062\uffd1\001\002\000\020" +
    "\004\054\005\040\027\036\030\037\032\060\054\056\056" +
    "\047\001\002\000\050\026\uffcc\034\114\035\115\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\057\uffcc\062\uffcc\001\002\000\020\004\054\005\040\027" +
    "\036\030\037\032\060\054\056\056\047\001\002\000\020" +
    "\004\054\005\040\027\036\030\037\032\060\054\056\056" +
    "\047\001\002\000\050\026\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca" +
    "\057\uffca\062\uffca\001\002\000\050\026\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\055\uffc9\057\uffc9\062\uffc9\001\002\000\044\026\uffcf" +
    "\036\112\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\055\uffcf\057\uffcf\062\uffcf\001\002\000\044\026\uffd0\036" +
    "\112\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\055" +
    "\uffd0\057\uffd0\062\uffd0\001\002\000\044\026\uffce\036\112" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce" +
    "\057\uffce\062\uffce\001\002\000\044\026\uffd2\036\112\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\057" +
    "\uffd2\062\uffd2\001\002\000\042\026\uffd5\037\105\040\106" +
    "\041\104\042\107\043\110\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\062\uffd5" +
    "\001\002\000\030\026\uffd8\045\102\046\101\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8\062\uffd8" +
    "\001\002\000\030\026\uffda\045\102\046\101\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\055\uffda\057\uffda\062\uffda" +
    "\001\002\000\026\004\054\005\040\027\036\030\037\032" +
    "\060\044\052\046\055\054\056\055\uffae\056\047\001\002" +
    "\000\006\055\uffad\062\133\001\002\000\004\055\132\001" +
    "\002\000\050\026\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\057\uffbe" +
    "\062\uffbe\001\002\000\026\004\054\005\040\027\036\030" +
    "\037\032\060\044\052\046\055\054\056\055\uffae\056\047" +
    "\001\002\000\004\055\uffac\001\002\000\042\026\uffd4\037" +
    "\105\040\106\041\104\042\107\043\110\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\057" +
    "\uffd4\062\uffd4\001\002\000\046\003\ufff4\004\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\031\ufff4\061\ufff4\001\002\000\006\057\uffbb\062\142\001" +
    "\002\000\004\057\141\001\002\000\050\026\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\057\uffbd\062\uffbd\001\002\000\026\004" +
    "\054\005\040\027\036\030\037\032\060\044\052\046\055" +
    "\054\056\056\047\057\uffbc\001\002\000\004\057\uffba\001" +
    "\002\000\004\055\145\001\002\000\004\026\146\001\002" +
    "\000\046\003\ufff3\004\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\031\ufff3\061\ufff3\001" +
    "\002\000\004\054\150\001\002\000\006\010\151\055\ufff1" +
    "\001\002\000\014\004\012\011\017\012\020\013\026\014" +
    "\024\001\002\000\004\055\153\001\002\000\004\033\154" +
    "\001\002\000\004\060\155\001\002\000\020\004\012\010" +
    "\010\011\017\012\020\013\026\014\024\061\uffee\001\002" +
    "\000\020\004\012\010\010\011\017\012\020\013\026\014" +
    "\024\061\uffee\001\002\000\004\061\162\001\002\000\020" +
    "\004\012\010\010\011\017\012\020\013\026\014\024\061" +
    "\uffee\001\002\000\004\061\uffed\001\002\000\004\026\163" +
    "\001\002\000\026\004\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\001\002" +
    "\000\004\061\uffec\001\002\000\004\004\166\001\002\000" +
    "\006\055\ufff0\062\167\001\002\000\006\010\151\055\ufff1" +
    "\001\002\000\004\055\uffef\001\002\000\004\021\ufffb\001" +
    "\002\000\014\004\012\011\017\012\020\013\026\014\024" +
    "\001\002\000\010\004\uffa7\026\uffa7\054\uffa7\001\002\000" +
    "\004\021\ufff8\001\002\000\004\021\ufffa\001\002\000\004" +
    "\002\001\001\002\000\004\060\200\001\002\000\036\003" +
    "\212\004\213\010\010\011\017\012\020\013\026\014\024" +
    "\020\211\022\210\023\202\024\215\025\203\031\214\061" +
    "\uffe4\001\002\000\004\026\265\001\002\000\006\022\254" +
    "\060\253\001\002\000\004\054\243\001\002\000\036\003" +
    "\uffb9\004\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\020\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\031\uffb9\061" +
    "\uffb9\001\002\000\036\003\212\004\213\010\010\011\017" +
    "\012\020\013\026\014\024\020\211\022\210\023\202\024" +
    "\215\025\203\031\214\061\uffe4\001\002\000\036\003\uffb8" +
    "\004\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\020" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\031\uffb8\061\uffb8" +
    "\001\002\000\004\061\241\001\002\000\004\054\233\001" +
    "\002\000\024\004\054\005\040\027\036\030\037\032\060" +
    "\044\052\046\055\054\056\056\047\001\002\000\004\026" +
    "\230\001\002\000\006\004\uffa8\054\127\001\002\000\004" +
    "\054\224\001\002\000\004\054\216\001\002\000\024\004" +
    "\054\005\040\027\036\030\037\032\060\044\052\046\055" +
    "\054\056\056\047\001\002\000\004\055\220\001\002\000" +
    "\004\060\221\001\002\000\036\003\212\004\213\010\010" +
    "\011\017\012\020\013\026\014\024\020\211\022\210\023" +
    "\202\024\215\025\203\031\214\061\uffe4\001\002\000\004" +
    "\061\223\001\002\000\036\003\uffb5\004\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\020\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\031\uffb5\061\uffb5\001\002\000\024\004" +
    "\054\005\040\027\036\030\037\032\060\044\052\046\055" +
    "\054\056\056\047\001\002\000\004\055\226\001\002\000" +
    "\004\026\227\001\002\000\036\003\uffb6\004\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\020\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\031\uffb6\061\uffb6\001\002\000\036" +
    "\003\uffaf\004\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\020\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\031\uffaf" +
    "\061\uffaf\001\002\000\004\026\232\001\002\000\036\003" +
    "\uffb7\004\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\031\uffb7\061" +
    "\uffb7\001\002\000\024\004\054\005\040\027\036\030\037" +
    "\032\060\044\052\046\055\054\056\056\047\001\002\000" +
    "\004\055\235\001\002\000\004\060\236\001\002\000\036" +
    "\003\212\004\213\010\010\011\017\012\020\013\026\014" +
    "\024\020\211\022\210\023\202\024\215\025\203\031\214" +
    "\061\uffe4\001\002\000\004\061\240\001\002\000\036\003" +
    "\uffb3\004\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\031\uffb3\061" +
    "\uffb3\001\002\000\004\002\uffe2\001\002\000\004\061\uffe3" +
    "\001\002\000\004\004\244\001\002\000\004\063\245\001" +
    "\002\000\024\004\054\005\040\027\036\030\037\032\060" +
    "\044\052\046\055\054\056\056\047\001\002\000\004\055" +
    "\247\001\002\000\004\060\250\001\002\000\036\003\212" +
    "\004\213\010\010\011\017\012\020\013\026\014\024\020" +
    "\211\022\210\023\202\024\215\025\203\031\214\061\uffe4" +
    "\001\002\000\004\061\252\001\002\000\036\003\uffb4\004" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\020\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\031\uffb4\061\uffb4\001" +
    "\002\000\036\003\212\004\213\010\010\011\017\012\020" +
    "\013\026\014\024\020\211\022\210\023\202\024\215\025" +
    "\203\031\214\061\uffe4\001\002\000\004\054\255\001\002" +
    "\000\024\004\054\005\040\027\036\030\037\032\060\044" +
    "\052\046\055\054\056\056\047\001\002\000\004\055\257" +
    "\001\002\000\004\060\260\001\002\000\036\003\212\004" +
    "\213\010\010\011\017\012\020\013\026\014\024\020\211" +
    "\022\210\023\202\024\215\025\203\031\214\061\uffe4\001" +
    "\002\000\004\061\262\001\002\000\036\003\uffb2\004\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\020\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\031\uffb2\061\uffb2\001\002" +
    "\000\004\061\264\001\002\000\036\003\uffb1\004\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\020\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\031\uffb1\061\uffb1\001\002\000" +
    "\036\003\uffb0\004\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\031" +
    "\uffb0\061\uffb0\001\002\000\004\020\267\001\002\000\014" +
    "\004\012\011\017\012\020\013\026\014\024\001\002\000" +
    "\004\054\271\001\002\000\020\004\012\010\273\011\017" +
    "\012\020\013\026\014\024\055\uffe9\001\002\000\004\004" +
    "\305\001\002\000\014\004\012\011\017\012\020\013\026" +
    "\014\024\001\002\000\004\055\275\001\002\000\004\060" +
    "\276\001\002\000\036\003\212\004\213\010\010\011\017" +
    "\012\020\013\026\014\024\020\211\022\210\023\202\024" +
    "\215\025\203\031\214\061\uffe4\001\002\000\004\061\300" +
    "\001\002\000\026\004\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\001\002" +
    "\000\004\004\302\001\002\000\006\055\uffe8\062\303\001" +
    "\002\000\020\004\012\010\273\011\017\012\020\013\026" +
    "\014\024\055\uffe9\001\002\000\004\055\uffe6\001\002\000" +
    "\006\055\uffe7\062\306\001\002\000\020\004\012\010\273" +
    "\011\017\012\020\013\026\014\024\055\uffe9\001\002\000" +
    "\004\055\uffe5\001\002\000\046\003\ufff6\004\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\031\ufff6\061\ufff6\001\002\000\004\004\312\001\002\000" +
    "\004\033\034\001\002\000\004\033\314\001\002\000\014" +
    "\004\012\011\017\012\020\013\026\014\024\001\002\000" +
    "\004\026\316\001\002\000\026\004\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\001\002\000\004\007\322\001\002\000\004\026\321" +
    "\001\002\000\026\004\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\001\002" +
    "\000\004\004\323\001\002\000\004\026\324\001\002\000" +
    "\030\004\uffff\006\005\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\001\002\000" +
    "\026\004\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\021\ufffe\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\013\005\020\006\012" +
    "\007\014\010\026\013\015\016\024\037\022\001\001\000" +
    "\002\001\001\000\006\006\307\037\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\175\001\001\000\022\004\174\005\020\006\012\007\014" +
    "\010\026\013\015\016\024\037\022\001\001\000\022\004" +
    "\173\005\020\006\012\007\014\010\026\013\015\016\024" +
    "\037\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\170\005\020\006\012\007\014\010\026\013\015" +
    "\016\024\037\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\030\005\020\006\012" +
    "\007\014\010\026\013\015\016\024\037\022\001\001\000" +
    "\002\001\001\000\022\004\027\005\020\006\012\007\014" +
    "\010\026\013\015\016\024\037\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\020\127" +
    "\021\034\022\056\024\143\025\052\026\050\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\060\001\001" +
    "\000\032\020\047\021\034\022\056\025\052\026\050\027" +
    "\045\030\044\031\043\032\042\033\041\034\040\035\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\020\136\021\034\022\056\023\137" +
    "\025\052\026\050\027\045\030\044\031\043\032\042\033" +
    "\041\034\040\035\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\034\022\056\032\134\033\041\034" +
    "\040\035\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\034\022\056\030\073\031\043\032\042\033" +
    "\041\034\040\035\060\001\001\000\032\020\061\021\034" +
    "\022\056\025\062\026\050\027\045\030\044\031\043\032" +
    "\042\033\041\034\040\035\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\034\022\056\026\065\027\045" +
    "\030\044\031\043\032\042\033\041\034\040\035\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\021\034" +
    "\022\056\027\067\030\044\031\043\032\042\033\041\034" +
    "\040\035\060\001\001\000\002\001\001\000\032\020\071" +
    "\021\034\022\056\025\052\026\050\027\045\030\044\031" +
    "\043\032\042\033\041\034\040\035\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\034\022\056\031\125\032\042\033\041\034\040\035\060" +
    "\001\001\000\020\021\034\022\056\031\124\032\042\033" +
    "\041\034\040\035\060\001\001\000\020\021\034\022\056" +
    "\031\077\032\042\033\041\034\040\035\060\001\001\000" +
    "\002\001\001\000\016\021\034\022\056\032\123\033\041" +
    "\034\040\035\060\001\001\000\016\021\034\022\056\032" +
    "\102\033\041\034\040\035\060\001\001\000\002\001\001" +
    "\000\014\021\034\022\056\033\122\034\040\035\060\001" +
    "\001\000\014\021\034\022\056\033\121\034\040\035\060" +
    "\001\001\000\014\021\034\022\056\033\120\034\040\035" +
    "\060\001\001\000\014\021\034\022\056\033\117\034\040" +
    "\035\060\001\001\000\014\021\034\022\056\033\110\034" +
    "\040\035\060\001\001\000\002\001\001\000\012\021\034" +
    "\022\056\034\112\035\060\001\001\000\002\001\001\000" +
    "\010\021\034\022\056\035\116\001\001\000\010\021\034" +
    "\022\056\035\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\020\127\021\034\022\056\024\130" +
    "\025\052\026\050\027\045\030\044\031\043\032\042\033" +
    "\041\034\040\035\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\127\021\034\022" +
    "\056\024\133\025\052\026\050\027\045\030\044\031\043" +
    "\032\042\033\041\034\040\035\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\136\021" +
    "\034\022\056\023\142\025\052\026\050\027\045\030\044" +
    "\031\043\032\042\033\041\034\040\035\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\151\001\001\000" +
    "\004\037\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\157\006\012\007\155\012" +
    "\156\037\022\001\001\000\014\005\157\006\012\007\155" +
    "\012\163\037\022\001\001\000\002\001\001\000\014\005" +
    "\157\006\012\007\155\012\160\037\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\203\006\012\007\205\015\206\021\200\036\204\037\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\203\006\012\007\205" +
    "\015\241\021\200\036\204\037\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\020\230" +
    "\021\034\022\056\025\052\026\050\027\045\030\044\031" +
    "\043\032\042\033\041\034\040\035\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\020\216\021\034\022\056\025\052\026\050" +
    "\027\045\030\044\031\043\032\042\033\041\034\040\035" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\203\006\012\007\205\015\221\021\200\036\204\037" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\020\224\021\034\022\056\025\052\026\050\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\020\233\021\034\022\056\025\052\026\050\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\203\006" +
    "\012\007\205\015\236\021\200\036\204\037\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\020\245\021\034\022\056\025\052\026\050\027\045\030" +
    "\044\031\043\032\042\033\041\034\040\035\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\203\006" +
    "\012\007\205\015\250\021\200\036\204\037\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\203\006" +
    "\012\007\205\015\262\021\200\036\204\037\022\001\001" +
    "\000\002\001\001\000\032\020\255\021\034\022\056\025" +
    "\052\026\050\027\045\030\044\031\043\032\042\033\041" +
    "\034\040\035\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\203\006\012\007\205\015\260\021\200" +
    "\036\204\037\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\267\001\001\000\002\001" +
    "\001\000\006\014\273\037\271\001\001\000\002\001\001" +
    "\000\004\037\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\203\006\012\007\205\015\276\021\200" +
    "\036\204\037\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\303" +
    "\037\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\306\037\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\324" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private ASExp as = new ASExp();
   private ASIns is = new ASIns();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= IMPORTBL DECBL MAINBL 
            {
              Object RESULT =null;
		Object imps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object exe = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.program(imps,decs,exe); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTBL ::= Import Id From Id Punto IMPORTBL 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV s = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.imports(i,s,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTBL ::= Import error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECBL ::= DECVAR DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decvar(v,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECBL ::= DECVARREG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decvarreg(v,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECBL ::= DECREG DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decreg(v,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECBL ::= DECFUN DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decfun(v,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECBL ::= DECTYPE DECBL 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.dectype(v,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECVAR ::= Const DECVAR2 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.const_var(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECVAR ::= DECVAR2 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.noconst_var(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECVAR2 ::= TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.var_init(t,i,e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR2",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECVARREG ::= TYPENAME Id PA VALUES PC Punto 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.varreg_init(t,i,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVARREG",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECREG ::= Data Id PA CPARAMS PC Asign LA REGDENTRO LC Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.reg_init(i,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECREG",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CPARAMS ::= Const TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.cparams(t,i,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CPARAMS ::= Const TYPENAME Id Coma CPARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.cparams(t,i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REGDENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // REGDENTRO ::= DECVAR REGDENTRO 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decvar(d,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REGDENTRO ::= DECVARREG REGDENTRO 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.decvarreg(d,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECTYPE ::= Type Id Asign TYPENAME Punto 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.type_init(i,t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECTYPE",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECFUN ::= Function Id Return TYPENAME PA PARAMS PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.fun_init(i,t,ps,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECFUN",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= Const TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.cparams(t,i,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= TYPENAME Id 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMS ::= Const TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.cparams(t,i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMS ::= TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.params(t,i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DENTRO ::= INSTR DENTRO 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.instructions(i,r); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAINBL ::= Main LA DENTRO LC 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAINBL",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPR ::= E0 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E0 ::= E0 Acceso E1 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.ACCESO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E0 ::= E1 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E1 ::= E1 Indice E2 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.INDICE); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E1 ::= E2 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E2 ::= Guion E3 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.SIGNO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E2 ::= E3 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E3 ::= E3 Mod E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MOD); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E3 ::= E3 Div E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DIV); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E3 ::= E3 Mul E4 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MUL); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E3 ::= E4 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E4 ::= E4 Suma E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.SUMA); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= E4 Guion E5 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.RESTA); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E4 ::= Not E5 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_mono(o,Op.NOT); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E4 ::= E5 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E5 Meq E6 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MEQ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E5 ::= E5 Maq E6 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAQ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E5 ::= E5 Menor E6 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MENOR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E5 ::= E5 Mayor E6 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.MAYOR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E5 ::= E5 And E6 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.AND); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E5 ::= E6 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E6 ::= E6 Or E7 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.OR); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E6 ::= E7 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E7 ::= E7 Igual ETOP 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.IGUAL); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E7 ::= E7 Distinto ETOP 
            {
              Object RESULT =null;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_bin(o1,o2,Op.DISTINTO); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E7 ::= ETOP 
            {
              Object RESULT =null;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=o; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETOP ::= Entero 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETOP ::= Si 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETOP ::= No 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETOP ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETOP ::= Caracter 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.op_basico(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETOP ::= PA E0 PC 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETOP ::= EXPFUN 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETOP ::= EXPLISTA 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETOP ::= PA EXPR Coma EXPR PC 
            {
              Object RESULT =null;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_bin(e1,e2,Op.ARRAYINIT); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPFUN ::= Id PA VALUES PC 
            {
              Object RESULT =null;
		TV i = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_call(i,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPFUN",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPLISTA ::= CA LISTADENTRO CC 
            {
              Object RESULT =null;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=as.op_listinit(l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPLISTA",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTADENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTADENTRO ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTADENTRO ::= EXPR Coma LISTADENTRO 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=as.list_cons(e,l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTR ::= DECVAR 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.ins_var(i); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTR ::= DECVARREG 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.ins_varreg(i); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTR ::= Return EXPR Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_return(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTR ::= Kut PA EXPR PC Punto 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=is.ins_kut(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTR ::= While PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_while(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTR ::= For PA Id DosPts EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		TV el = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_for(el,ar,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTR ::= If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_if(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTR ::= Else If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_ifelse(b,d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTR ::= Else LA DENTRO LC 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_else(d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTR ::= EXPFUN Punto 
            {
              Object RESULT =null;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=is.ins_fun(f); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTR ::= error Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALUES ::= EXPR 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,null); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALUES ::= EXPR Coma VALUES 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=is.values(e,v); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPENAME ::= Ent 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=Typename.ENT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPENAME ::= Bul 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=Typename.BUL; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPENAME ::= Car 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=Typename.CAR; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPENAME ::= Id 
            {
              Object RESULT =null;
		TV e = (TV)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Typename((TV)e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPENAME ::= Arr Backslash TYPENAME 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Typename((Typename)e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

