
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 17 20:10:49 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.E;
import ast.ASExp;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 17 20:10:49 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\010\000\002\004\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\007\000\002" +
    "\007\014\000\002\010\002\000\002\010\007\000\002\011" +
    "\002\000\002\011\004\000\002\012\014\000\002\013\002" +
    "\000\002\013\007\000\002\013\006\000\002\014\002\000" +
    "\002\014\004\000\002\015\006\000\002\016\006\000\002" +
    "\020\003\000\002\021\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\030\004\uffff\006\004\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\001\002\000\004\004\121\001\002\000\004\002\120\001" +
    "\002\000\026\004\012\010\010\011\016\012\017\013\026" +
    "\014\023\015\021\016\011\017\007\021\ufffd\001\002\000" +
    "\004\004\115\001\002\000\014\004\012\011\016\012\017" +
    "\013\026\014\023\001\002\000\004\004\072\001\002\000" +
    "\030\004\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\021\uffe3\053\uffe3\001\002\000" +
    "\030\004\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\021\ufff7\056\ufff7\001\002\000" +
    "\004\021\063\001\002\000\026\004\012\010\010\011\016" +
    "\012\017\013\026\014\023\015\021\016\011\017\007\021" +
    "\ufffd\001\002\000\004\063\057\001\002\000\030\004\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\053\uffe6\001\002\000\026\004\012" +
    "\010\010\011\016\012\017\013\026\014\023\015\021\016" +
    "\011\017\007\021\ufffd\001\002\000\004\004\036\001\002" +
    "\000\004\004\031\001\002\000\030\004\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\021\uffe4\053\uffe4\001\002\000\026\004\012\010\010\011" +
    "\016\012\017\013\026\014\023\015\021\016\011\017\007" +
    "\021\ufffd\001\002\000\026\004\012\010\010\011\016\012" +
    "\017\013\026\014\023\015\021\016\011\017\007\021\ufffd" +
    "\001\002\000\030\004\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\053\uffe5" +
    "\001\002\000\004\021\ufffb\001\002\000\004\021\ufff9\001" +
    "\002\000\004\032\032\001\002\000\004\005\034\001\002" +
    "\000\004\025\035\001\002\000\004\025\uffe8\001\002\000" +
    "\030\004\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\021\ufff6\056\ufff6\001\002\000" +
    "\004\053\037\001\002\000\006\010\040\054\ufff4\001\002" +
    "\000\014\004\012\011\016\012\017\013\026\014\023\001" +
    "\002\000\004\054\042\001\002\000\004\032\043\001\002" +
    "\000\004\055\044\001\002\000\020\004\012\010\010\011" +
    "\016\012\017\013\026\014\023\056\ufff2\001\002\000\004" +
    "\056\050\001\002\000\020\004\012\010\010\011\016\012" +
    "\017\013\026\014\023\056\ufff2\001\002\000\004\056\ufff1" +
    "\001\002\000\004\025\051\001\002\000\026\004\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\021\ufff5\001\002\000\004\004\053\001\002\000" +
    "\004\061\054\001\002\000\006\010\040\054\ufff4\001\002" +
    "\000\004\054\ufff3\001\002\000\004\021\ufffc\001\002\000" +
    "\014\004\012\011\016\012\017\013\026\014\023\001\002" +
    "\000\030\004\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\053\uffe2\001\002" +
    "\000\004\021\ufffa\001\002\000\004\002\001\001\002\000" +
    "\004\055\064\001\002\000\020\004\012\010\010\011\016" +
    "\012\017\013\026\014\023\056\uffec\001\002\000\020\004" +
    "\012\010\010\011\016\012\017\013\026\014\023\056\uffec" +
    "\001\002\000\004\056\070\001\002\000\020\004\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\056\uffe7\001\002" +
    "\000\004\002\uffe9\001\002\000\004\056\uffeb\001\002\000" +
    "\004\020\073\001\002\000\014\004\012\011\016\012\017" +
    "\013\026\014\023\001\002\000\004\053\075\001\002\000" +
    "\020\004\012\010\077\011\016\012\017\013\026\014\023" +
    "\054\uffef\001\002\000\004\004\111\001\002\000\014\004" +
    "\012\011\016\012\017\013\026\014\023\001\002\000\004" +
    "\054\101\001\002\000\004\055\102\001\002\000\020\004" +
    "\012\010\010\011\016\012\017\013\026\014\023\056\uffec" +
    "\001\002\000\004\056\104\001\002\000\026\004\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\021\ufff0\001\002\000\004\004\106\001\002\000" +
    "\004\061\107\001\002\000\020\004\012\010\077\011\016" +
    "\012\017\013\026\014\023\054\uffef\001\002\000\004\054" +
    "\uffee\001\002\000\004\061\112\001\002\000\020\004\012" +
    "\010\077\011\016\012\017\013\026\014\023\054\uffef\001" +
    "\002\000\004\054\uffed\001\002\000\030\004\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\021\ufff8\056\ufff8\001\002\000\004\032\116\001\002" +
    "\000\014\004\012\011\016\012\017\013\026\014\023\001" +
    "\002\000\026\004\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\001\002\000" +
    "\004\002\000\001\002\000\004\007\122\001\002\000\004" +
    "\004\123\001\002\000\004\025\124\001\002\000\030\004" +
    "\uffff\006\004\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\021\uffff\001\002\000\026\004" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\021\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\013\005\017\006\012" +
    "\007\024\012\014\015\023\017\021\001\001\000\002\001" +
    "\001\000\006\006\113\017\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\061\001" +
    "\001\000\020\004\060\005\017\006\012\007\024\012\014" +
    "\015\023\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\055\005\017\006\012\007\024\012\014" +
    "\015\023\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\027\005\017\006\012" +
    "\007\024\012\014\015\023\017\021\001\001\000\020\004" +
    "\026\005\017\006\012\007\024\012\014\015\023\017\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\040\001\001\000\004\017\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\045\006\012\011\044\017\021\001\001\000\002" +
    "\001\001\000\012\005\045\006\012\011\046\017\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\066\006\012\014\065" +
    "\017\021\021\064\001\001\000\014\005\066\006\012\014" +
    "\070\017\021\021\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\073\001\001\000\002\001\001\000\006" +
    "\013\077\017\075\001\001\000\002\001\001\000\004\017" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\066\006\012\014\102\017\021\021\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\107\017\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\112\017\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\124\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private ASExp as = new ASExp();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= IMPORTBL DECBL MAINBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTBL ::= Import Id From Id Punto IMPORTBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECBL ::= DECVAR DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECBL ::= DECREG DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECBL ::= DECFUN DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECBL ::= DECTYPE DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECVAR ::= Const DECVAR2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECVAR ::= DECVAR2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECVAR2 ::= TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR2",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECREG ::= Data Id PA CPARAMS PC Asign CA REGDENTRO CC Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECREG",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CPARAMS ::= Const TYPENAME Id Coma CPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REGDENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REGDENTRO ::= DECVAR REGDENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECFUN ::= Function Id Return TYPENAME PA PARAMS PC CA DENTRO CC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECFUN",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= Const TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DENTRO ::= INSTR DENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECTYPE ::= Type Id Asign TYPENAME 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECTYPE",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAINBL ::= Main CA DENTRO CC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAINBL",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR ::= Entero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTR ::= DECVAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPENAME ::= Ent 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPENAME ::= Bul 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPENAME ::= Car 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPENAME ::= Id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPENAME ::= Arr Backslash TYPENAME 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

