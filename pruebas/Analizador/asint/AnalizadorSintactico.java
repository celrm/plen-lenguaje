
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 17 21:11:33 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.E;
import ast.ASExp;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 17 21:11:33 CEST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\010\000\002\004\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\007\000\002" +
    "\007\010\000\002\010\014\000\002\011\002\000\002\011" +
    "\007\000\002\012\002\000\002\012\004\000\002\012\004" +
    "\000\002\013\014\000\002\014\002\000\002\014\007\000" +
    "\002\014\006\000\002\015\002\000\002\015\004\000\002" +
    "\016\006\000\002\017\006\000\002\020\003\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\004\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\004\000\002\031" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\003\000\002\035\003\000" +
    "\002\035\007\000\002\021\006\000\002\022\005\000\002" +
    "\023\002\000\002\023\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\005\000\002\036\007\000\002\036\011" +
    "\000\002\036\013\000\002\036\011\000\002\036\011\000" +
    "\002\036\004\000\002\024\002\000\002\024\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\030\004\uffff\006\004\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\001\002\000\004\004\307\001\002\000\004\002\306\001" +
    "\002\000\026\004\012\010\010\011\016\012\017\013\026" +
    "\014\023\015\021\016\011\017\007\021\ufffd\001\002\000" +
    "\004\004\303\001\002\000\014\004\012\011\016\012\017" +
    "\013\026\014\023\001\002\000\004\004\260\001\002\000" +
    "\030\004\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\021\uffb1\054\uffb1\001\002\000" +
    "\044\004\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\031\ufff7\061\ufff7\001\002\000\004" +
    "\021\177\001\002\000\026\004\012\010\010\011\016\012" +
    "\017\013\026\014\023\015\021\016\011\017\007\021\ufffd" +
    "\001\002\000\004\064\173\001\002\000\030\004\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\021\uffb4\054\uffb4\001\002\000\026\004\012\010" +
    "\010\011\016\012\017\013\026\014\023\015\021\016\011" +
    "\017\007\021\ufffd\001\002\000\004\004\142\001\002\000" +
    "\004\004\031\001\002\000\030\004\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021" +
    "\uffb2\054\uffb2\001\002\000\026\004\012\010\010\011\016" +
    "\012\017\013\026\014\023\015\021\016\011\017\007\021" +
    "\ufffd\001\002\000\026\004\012\010\010\011\016\012\017" +
    "\013\026\014\023\015\021\016\011\017\007\021\ufffd\001" +
    "\002\000\030\004\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\054\uffb3\001" +
    "\002\000\004\021\ufffb\001\002\000\004\021\ufff9\001\002" +
    "\000\004\033\032\001\002\000\024\004\052\005\036\027" +
    "\033\030\035\032\056\044\050\046\053\054\054\056\044" +
    "\001\002\000\050\026\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\062" +
    "\uffcb\063\uffcb\001\002\000\050\026\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\055\uffc6\062\uffc6\063\uffc6\001\002\000\050\026\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\055\uffca\062\uffca\063\uffca\001\002\000\050" +
    "\026\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\055\uffcc\062\uffcc\063\uffcc\001" +
    "\002\000\050\026\uffd0\034\112\035\113\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\055\uffd0\062\uffd0" +
    "\063\uffd0\001\002\000\044\026\uffd2\036\110\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\062\uffd2\063" +
    "\uffd2\001\002\000\042\026\uffd8\037\104\040\103\041\102" +
    "\042\105\043\106\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\055\uffd8\062\uffd8\063\uffd8\001\002" +
    "\000\030\026\uffdc\045\100\046\077\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\055\uffdc\062\uffdc\063\uffdc\001\002" +
    "\000\024\026\uffe0\047\074\050\075\051\073\052\uffe0\053" +
    "\uffe0\055\uffe0\062\uffe0\063\uffe0\001\002\000\026\004\052" +
    "\005\036\027\033\030\035\032\056\044\050\046\053\054" +
    "\054\056\044\057\uffc1\001\002\000\016\026\uffe2\052\uffe2" +
    "\053\uffe2\055\uffe2\062\uffe2\063\uffe2\001\002\000\016\026" +
    "\uffe4\052\065\053\uffe4\055\uffe4\062\uffe4\063\uffe4\001\002" +
    "\000\004\026\134\001\002\000\020\004\052\005\036\027" +
    "\033\030\035\032\056\054\054\056\044\001\002\000\014" +
    "\026\uffe6\053\062\055\uffe6\062\uffe6\063\uffe6\001\002\000" +
    "\052\026\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\125\055\uffc9\062\uffc9" +
    "\063\uffc9\001\002\000\022\004\052\005\036\027\033\030" +
    "\035\032\056\044\050\054\054\056\044\001\002\000\024" +
    "\004\052\005\036\027\033\030\035\032\056\044\050\046" +
    "\053\054\054\056\044\001\002\000\050\026\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\055\uffc5\062\uffc5\063\uffc5\001\002\000\050\026" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\055\uffc8\062\uffc8\063\uffc8\001\002" +
    "\000\050\026\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd\062\uffcd\063" +
    "\uffcd\001\002\000\004\062\067\001\002\000\010\053\062" +
    "\055\063\062\uffe6\001\002\000\024\004\052\005\036\027" +
    "\033\030\035\032\056\044\050\046\053\054\054\056\044" +
    "\001\002\000\050\026\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\062" +
    "\uffc7\063\uffc7\001\002\000\016\026\uffe5\052\065\053\uffe5" +
    "\055\uffe5\062\uffe5\063\uffe5\001\002\000\024\004\052\005" +
    "\036\027\033\030\035\032\056\044\050\046\053\054\054" +
    "\056\044\001\002\000\016\026\uffe3\052\uffe3\053\uffe3\055" +
    "\uffe3\062\uffe3\063\uffe3\001\002\000\024\004\052\005\036" +
    "\027\033\030\035\032\056\044\050\046\053\054\054\056" +
    "\044\001\002\000\004\055\071\001\002\000\050\026\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\055\uffc4\062\uffc4\063\uffc4\001\002\000" +
    "\024\026\uffe1\047\074\050\075\051\073\052\uffe1\053\uffe1" +
    "\055\uffe1\062\uffe1\063\uffe1\001\002\000\022\004\052\005" +
    "\036\027\033\030\035\032\056\044\050\054\054\056\044" +
    "\001\002\000\022\004\052\005\036\027\033\030\035\032" +
    "\056\044\050\054\054\056\044\001\002\000\022\004\052" +
    "\005\036\027\033\030\035\032\056\044\050\054\054\056" +
    "\044\001\002\000\030\026\uffde\045\100\046\077\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde\062\uffde\063" +
    "\uffde\001\002\000\020\004\052\005\036\027\033\030\035" +
    "\032\056\054\054\056\044\001\002\000\020\004\052\005" +
    "\036\027\033\030\035\032\056\054\054\056\044\001\002" +
    "\000\042\026\uffdb\037\104\040\103\041\102\042\105\043" +
    "\106\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\055\uffdb\062\uffdb\063\uffdb\001\002\000\020\004" +
    "\052\005\036\027\033\030\035\032\056\054\054\056\044" +
    "\001\002\000\020\004\052\005\036\027\033\030\035\032" +
    "\056\054\054\056\044\001\002\000\020\004\052\005\036" +
    "\027\033\030\035\032\056\054\054\056\044\001\002\000" +
    "\020\004\052\005\036\027\033\030\035\032\056\054\054" +
    "\056\044\001\002\000\020\004\052\005\036\027\033\030" +
    "\035\032\056\054\054\056\044\001\002\000\044\026\uffd6" +
    "\036\110\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\062\uffd6\063\uffd6\001\002\000\020\004\052\005" +
    "\036\027\033\030\035\032\056\054\054\056\044\001\002" +
    "\000\050\026\uffd1\034\112\035\113\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\062\uffd1\063" +
    "\uffd1\001\002\000\020\004\052\005\036\027\033\030\035" +
    "\032\056\054\054\056\044\001\002\000\020\004\052\005" +
    "\036\027\033\030\035\032\056\054\054\056\044\001\002" +
    "\000\050\026\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\062\uffcf\063" +
    "\uffcf\001\002\000\050\026\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce" +
    "\062\uffce\063\uffce\001\002\000\044\026\uffd4\036\110\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\062" +
    "\uffd4\063\uffd4\001\002\000\044\026\uffd3\036\110\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\062\uffd3" +
    "\063\uffd3\001\002\000\044\026\uffd5\036\110\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\062\uffd5\063" +
    "\uffd5\001\002\000\044\026\uffd7\036\110\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\062\uffd7\063\uffd7" +
    "\001\002\000\042\026\uffda\037\104\040\103\041\102\042" +
    "\105\043\106\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\055\uffda\062\uffda\063\uffda\001\002\000" +
    "\030\026\uffdd\045\100\046\077\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\062\uffdd\063\uffdd\001\002\000" +
    "\030\026\uffdf\045\100\046\077\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\055\uffdf\062\uffdf\063\uffdf\001\002\000" +
    "\026\004\052\005\036\027\033\030\035\032\056\044\050" +
    "\046\053\054\054\055\uffb6\056\044\001\002\000\004\062" +
    "\131\001\002\000\004\055\130\001\002\000\050\026\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\062\uffc3\063\uffc3\001\002\000" +
    "\026\004\052\005\036\027\033\030\035\032\056\044\050" +
    "\046\053\054\054\055\uffb6\056\044\001\002\000\004\055" +
    "\uffb5\001\002\000\042\026\uffd9\037\104\040\103\041\102" +
    "\042\105\043\106\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\062\uffd9\063\uffd9\001\002" +
    "\000\044\004\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\031\ufff6\061\ufff6\001\002\000" +
    "\004\062\140\001\002\000\004\057\137\001\002\000\050" +
    "\026\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\055\uffc2\062\uffc2\063\uffc2\001" +
    "\002\000\026\004\052\005\036\027\033\030\035\032\056" +
    "\044\050\046\053\054\054\056\044\057\uffc1\001\002\000" +
    "\004\057\uffc0\001\002\000\004\054\143\001\002\000\006" +
    "\010\144\055\ufff3\001\002\000\014\004\012\011\016\012" +
    "\017\013\026\014\023\001\002\000\004\055\146\001\002" +
    "\000\004\033\147\001\002\000\004\060\150\001\002\000" +
    "\020\004\012\010\010\011\016\012\017\013\026\014\023" +
    "\061\ufff1\001\002\000\020\004\012\010\010\011\016\012" +
    "\017\013\026\014\023\061\ufff1\001\002\000\004\061\163" +
    "\001\002\000\020\004\012\010\010\011\016\012\017\013" +
    "\026\014\023\061\ufff1\001\002\000\004\004\155\001\002" +
    "\000\006\033\032\054\156\001\002\000\026\004\052\005" +
    "\036\027\033\030\035\032\056\044\050\046\053\054\054" +
    "\055\uffb6\056\044\001\002\000\004\055\160\001\002\000" +
    "\004\026\161\001\002\000\034\004\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\031\ufff5\061\ufff5\001\002\000\004\061\ufff0" +
    "\001\002\000\004\026\164\001\002\000\026\004\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\021\ufff4\001\002\000\004\061\uffef\001\002\000" +
    "\004\004\167\001\002\000\004\062\170\001\002\000\006" +
    "\010\144\055\ufff3\001\002\000\004\055\ufff2\001\002\000" +
    "\004\021\ufffc\001\002\000\014\004\012\011\016\012\017" +
    "\013\026\014\023\001\002\000\030\004\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\021\uffb0\054\uffb0\001\002\000\004\021\ufffa\001\002\000" +
    "\004\002\001\001\002\000\004\060\200\001\002\000\034" +
    "\004\212\010\010\011\016\012\017\013\026\014\023\020" +
    "\211\022\210\023\202\024\214\025\203\031\213\061\uffea" +
    "\001\002\000\004\026\257\001\002\000\004\054\251\001" +
    "\002\000\004\054\241\001\002\000\034\004\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\020\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\031\uffbf\061\uffbf\001\002\000\034" +
    "\004\212\010\010\011\016\012\017\013\026\014\023\020" +
    "\211\022\210\023\202\024\214\025\203\031\213\061\uffea" +
    "\001\002\000\034\004\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\031\uffbe\061\uffbe\001\002\000\004\061\237\001\002\000" +
    "\004\054\231\001\002\000\024\004\052\005\036\027\033" +
    "\030\035\032\056\044\050\046\053\054\054\056\044\001" +
    "\002\000\006\004\uffb1\054\125\001\002\000\004\054\223" +
    "\001\002\000\004\054\215\001\002\000\024\004\052\005" +
    "\036\027\033\030\035\032\056\044\050\046\053\054\054" +
    "\056\044\001\002\000\004\055\217\001\002\000\004\060" +
    "\220\001\002\000\034\004\212\010\010\011\016\012\017" +
    "\013\026\014\023\020\211\022\210\023\202\024\214\025" +
    "\203\031\213\061\uffea\001\002\000\004\061\222\001\002" +
    "\000\034\004\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\031\uffbb" +
    "\061\uffbb\001\002\000\024\004\052\005\036\027\033\030" +
    "\035\032\056\044\050\046\053\054\054\056\044\001\002" +
    "\000\004\055\225\001\002\000\004\026\226\001\002\000" +
    "\034\004\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\031\uffbc\061" +
    "\uffbc\001\002\000\004\026\230\001\002\000\034\004\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\020\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\031\uffbd\061\uffbd\001\002" +
    "\000\024\004\052\005\036\027\033\030\035\032\056\044" +
    "\050\046\053\054\054\056\044\001\002\000\004\055\233" +
    "\001\002\000\004\060\234\001\002\000\034\004\212\010" +
    "\010\011\016\012\017\013\026\014\023\020\211\022\210" +
    "\023\202\024\214\025\203\031\213\061\uffea\001\002\000" +
    "\004\061\236\001\002\000\034\004\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\020\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\031\uffb9\061\uffb9\001\002\000\004\002\uffe7" +
    "\001\002\000\004\061\uffe9\001\002\000\024\004\052\005" +
    "\036\027\033\030\035\032\056\044\050\046\053\054\054" +
    "\056\044\001\002\000\004\063\243\001\002\000\024\004" +
    "\052\005\036\027\033\030\035\032\056\044\050\046\053" +
    "\054\054\056\044\001\002\000\004\055\245\001\002\000" +
    "\004\060\246\001\002\000\034\004\212\010\010\011\016" +
    "\012\017\013\026\014\023\020\211\022\210\023\202\024" +
    "\214\025\203\031\213\061\uffea\001\002\000\004\061\250" +
    "\001\002\000\034\004\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\031\uffba\061\uffba\001\002\000\024\004\052\005\036\027" +
    "\033\030\035\032\056\044\050\046\053\054\054\056\044" +
    "\001\002\000\004\055\253\001\002\000\004\060\254\001" +
    "\002\000\034\004\212\010\010\011\016\012\017\013\026" +
    "\014\023\020\211\022\210\023\202\024\214\025\203\031" +
    "\213\061\uffea\001\002\000\004\061\256\001\002\000\034" +
    "\004\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\020" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\031\uffb8\061\uffb8" +
    "\001\002\000\034\004\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\031\uffb7\061\uffb7\001\002\000\004\020\261\001\002\000" +
    "\014\004\012\011\016\012\017\013\026\014\023\001\002" +
    "\000\004\054\263\001\002\000\020\004\012\010\265\011" +
    "\016\012\017\013\026\014\023\055\uffed\001\002\000\004" +
    "\004\277\001\002\000\014\004\012\011\016\012\017\013" +
    "\026\014\023\001\002\000\004\055\267\001\002\000\004" +
    "\060\270\001\002\000\034\004\212\010\010\011\016\012" +
    "\017\013\026\014\023\020\211\022\210\023\202\024\214" +
    "\025\203\031\213\061\uffea\001\002\000\004\061\272\001" +
    "\002\000\026\004\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\001\002\000" +
    "\004\004\274\001\002\000\004\062\275\001\002\000\020" +
    "\004\012\010\265\011\016\012\017\013\026\014\023\055" +
    "\uffed\001\002\000\004\055\uffec\001\002\000\004\062\300" +
    "\001\002\000\020\004\012\010\265\011\016\012\017\013" +
    "\026\014\023\055\uffed\001\002\000\004\055\uffeb\001\002" +
    "\000\044\004\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\031\ufff8\061\ufff8\001\002\000" +
    "\004\033\304\001\002\000\014\004\012\011\016\012\017" +
    "\013\026\014\023\001\002\000\026\004\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\001\002\000\004\002\000\001\002\000\004\007" +
    "\310\001\002\000\004\004\311\001\002\000\004\026\312" +
    "\001\002\000\030\004\uffff\006\004\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\001\002\000\026\004\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\013\005\017\006\012" +
    "\010\024\013\014\016\023\037\021\001\001\000\002\001" +
    "\001\000\006\006\301\037\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\175\001" +
    "\001\000\020\004\174\005\017\006\012\010\024\013\014" +
    "\016\023\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\171\005\017\006\012\010\024\013\014" +
    "\016\023\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\027\005\017\006\012" +
    "\010\024\013\014\016\023\037\021\001\001\000\020\004" +
    "\026\005\017\006\012\010\024\013\014\016\023\037\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\020\046\021\033\022\054" +
    "\025\050\026\045\027\044\030\042\031\041\032\040\033" +
    "\037\034\036\035\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\020\134\021\033\022\054\023" +
    "\135\025\050\026\045\027\044\030\042\031\041\032\040" +
    "\033\037\034\036\035\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\033\022\054" +
    "\032\132\033\037\034\036\035\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\033\022\054\030\071" +
    "\031\041\032\040\033\037\034\036\035\056\001\001\000" +
    "\032\020\057\021\033\022\054\025\060\026\045\027\044" +
    "\030\042\031\041\032\040\033\037\034\036\035\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\021\033\022" +
    "\054\026\063\027\044\030\042\031\041\032\040\033\037" +
    "\034\036\035\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\021\033\022\054\027\065\030\042\031\041" +
    "\032\040\033\037\034\036\035\056\001\001\000\002\001" +
    "\001\000\032\020\067\021\033\022\054\025\050\026\045" +
    "\027\044\030\042\031\041\032\040\033\037\034\036\035" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\033\022\054\031\123\032\040\033" +
    "\037\034\036\035\056\001\001\000\020\021\033\022\054" +
    "\031\122\032\040\033\037\034\036\035\056\001\001\000" +
    "\020\021\033\022\054\031\075\032\040\033\037\034\036" +
    "\035\056\001\001\000\002\001\001\000\016\021\033\022" +
    "\054\032\121\033\037\034\036\035\056\001\001\000\016" +
    "\021\033\022\054\032\100\033\037\034\036\035\056\001" +
    "\001\000\002\001\001\000\014\021\033\022\054\033\120" +
    "\034\036\035\056\001\001\000\014\021\033\022\054\033" +
    "\117\034\036\035\056\001\001\000\014\021\033\022\054" +
    "\033\116\034\036\035\056\001\001\000\014\021\033\022" +
    "\054\033\115\034\036\035\056\001\001\000\014\021\033" +
    "\022\054\033\106\034\036\035\056\001\001\000\002\001" +
    "\001\000\012\021\033\022\054\034\110\035\056\001\001" +
    "\000\002\001\001\000\010\021\033\022\054\035\114\001" +
    "\001\000\010\021\033\022\054\035\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\125\021" +
    "\033\022\054\024\126\025\050\026\045\027\044\030\042" +
    "\031\041\032\040\033\037\034\036\035\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\020\125\021\033\022\054\024\131\025\050\026\045\027" +
    "\044\030\042\031\041\032\040\033\037\034\036\035\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\020\134\021\033\022\054\023\140\025\050\026" +
    "\045\027\044\030\042\031\041\032\040\033\037\034\036" +
    "\035\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\144\001\001\000\004\037\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\152\006\012\007\150\012\151\037\153\001\001\000\014" +
    "\005\152\006\012\007\150\012\164\037\153\001\001\000" +
    "\002\001\001\000\014\005\152\006\012\007\150\012\161" +
    "\037\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\020\125\021\033\022\054\024\156\025\050\026\045" +
    "\027\044\030\042\031\041\032\040\033\037\034\036\035" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\203\006\012\007\205\015\206\021\200\036\204\037\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\203\006\012\007\205" +
    "\015\237\021\200\036\204\037\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\020\226" +
    "\021\033\022\054\025\050\026\045\027\044\030\042\031" +
    "\041\032\040\033\037\034\036\035\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\020" +
    "\215\021\033\022\054\025\050\026\045\027\044\030\042" +
    "\031\041\032\040\033\037\034\036\035\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\203\006\012" +
    "\007\205\015\220\021\200\036\204\037\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\020\223\021\033" +
    "\022\054\025\050\026\045\027\044\030\042\031\041\032" +
    "\040\033\037\034\036\035\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\020\231\021\033\022\054\025\050" +
    "\026\045\027\044\030\042\031\041\032\040\033\037\034" +
    "\036\035\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\203\006\012\007\205\015\234\021\200\036" +
    "\204\037\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\020\241\021" +
    "\033\022\054\025\050\026\045\027\044\030\042\031\041" +
    "\032\040\033\037\034\036\035\056\001\001\000\002\001" +
    "\001\000\032\020\243\021\033\022\054\025\050\026\045" +
    "\027\044\030\042\031\041\032\040\033\037\034\036\035" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\203\006\012\007\205\015\246\021\200\036\204\037" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\020\251\021\033\022\054\025\050\026\045\027\044\030" +
    "\042\031\041\032\040\033\037\034\036\035\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\203\006" +
    "\012\007\205\015\254\021\200\036\204\037\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\261\001\001\000\002\001\001" +
    "\000\006\014\265\037\263\001\001\000\002\001\001\000" +
    "\004\037\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\203\006\012\007\205\015\270\021\200\036" +
    "\204\037\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\275\037" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\300\037\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\312\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


   private ASExp as = new ASExp();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= IMPORTBL DECBL MAINBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTBL ::= Import Id From Id Punto IMPORTBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTBL",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECBL ::= DECVAR DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECBL ::= DECREG DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECBL ::= DECFUN DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECBL ::= DECTYPE DECBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECBL",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECVAR ::= Const DECVAR2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECVAR ::= DECVAR2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECVAR2 ::= TYPENAME Id Asign EXPR Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVAR2",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECVARREG ::= TYPENAME Id PA VALUES PC Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECVARREG",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECREG ::= Data Id PA CPARAMS PC Asign LA REGDENTRO LC Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECREG",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CPARAMS ::= Const TYPENAME Id Coma CPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CPARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REGDENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REGDENTRO ::= DECVAR REGDENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REGDENTRO ::= DECVARREG REGDENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REGDENTRO",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECFUN ::= Function Id Return TYPENAME PA PARAMS PC LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECFUN",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= Const TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= TYPENAME Id Coma PARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMS",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DENTRO ::= INSTR DENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DENTRO",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECTYPE ::= Type Id Asign TYPENAME 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECTYPE",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAINBL ::= Main LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAINBL",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPR ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E0 ::= E0 Acceso E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E1 ::= E1 Indice E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E2 ::= Guion E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E3 ::= E3 Mod E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E3 ::= E3 Div E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E3 ::= E3 Mul E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E4 ::= E4 Suma E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E4 ::= E4 Guion E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E4 ::= Not E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E5 ::= E5 Meq E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E5 ::= E5 Maq E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E5 ::= E5 Menor E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E5 ::= E5 Mayor E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E5 ::= E5 And E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E6 ::= E6 Or E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E7 ::= E7 Igual ETOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E7 ::= E7 Distinto ETOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E7 ::= ETOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ETOP ::= Entero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ETOP ::= Si 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETOP ::= No 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETOP ::= Id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETOP ::= Caracter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETOP ::= PA E0 PC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETOP ::= EXPFUN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETOP ::= EXPLISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETOP ::= PA EXPR Coma EXPR PC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ETOP",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPFUN ::= Id PA VALUES PC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPFUN",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPLISTA ::= CA LISTADENTRO CC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPLISTA",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTADENTRO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTADENTRO ::= EXPR Coma LISTADENTRO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTADENTRO",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTR ::= DECVAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTR ::= DECVARREG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTR ::= Return EXPR Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTR ::= Kut PA EXPR PC Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTR ::= While PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTR ::= For PA EXPR DosPts EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTR ::= If PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTR ::= Else PA EXPR PC LA DENTRO LC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTR ::= EXPFUN Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTR",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALUES ::= EXPR Coma VALUES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALUES",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPENAME ::= Ent 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPENAME ::= Bul 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPENAME ::= Car 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPENAME ::= Id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPENAME ::= Arr Backslash TYPENAME 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

